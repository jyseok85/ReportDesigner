@inherits ControlBase
@inject SelectedControlService SelectService
@inject ControlModificationServcie ModificationService

@inject DragAndDropService DragService
@inject DesignerOptionService Options
@inject DesignerCSSService CSS

<div class="component"
     tabindex="@Model.TabIndex"
     id = "@Model.Uid"
     @onpointerdown=@(e => OnPointerDown(e, "Control"))
     @onpointerdown:stopPropagation="true"
     @onpointermove="OnPointerMove"
     @onkeydown="OnKeyDown"
     style=@("transform:" + GetStyle("translate") + "position:absolute;" + GetStyle("width") + GetStyle("height") + 
                            GetStyle("background-color") + GetStyle("z-index") + "outline:none;")
     >
    <CascadingValue Value="this">
        @if(DragService.Hidden && !Model.Locked)
        {
            <ModificationArea @ref=modificationArea></ModificationArea>
        }
     </CascadingValue>
     <div class="component-hidden-text" hidden=@HiddenControl>
        visibility : hidden
     </div>
     <CascadingValue Value="this">
     <div style="position:absolute;margin:0;top:0;">
     @for(int r = 0; r < Model.TableInfo.RowCount; r++)
     {
        @for(int c = 0; c < Model.TableInfo.ColCount; c++)
        {
            var childModel = Model.Children.Find(x => x.TableCellInfo.Col == c && x.TableCellInfo.Row == r);

            <Cell Base=childModel></Cell>     
        }
     }
     </div>
     </CascadingValue>
    @if(isDraging)
    {
        <div></div>
    }
</div>
<style>
  @*   table, th,td{
        border: 1px solid black;
        
    } *@
    .component{
        box-sizing: border-box;
    }

    .leftborder{
        border:1px solid red;
    }
    .rightborder{

    }
    
    .table{
        top: 0;
        height: 100%; /*inherit는 부모사이즈를 가져오고, 100%는 변경된 부모사이즈를 가져온다. */
        width: 100%;
        position: absolute;
        overflow: hidden;
        table-layout:fixed; /* 자동 셀크기 증가 막기 */
    }
     .table-text{
        display:flex;
        height: 100%; /*inherit는 부모사이즈를 가져오고, 100%는 변경된 부모사이즈를 가져온다. */
        width: 100%;
        pointer-events: none;
        line-height : 1;  /*기본값은 1이긴한데... 고급옵션에 따라 변경필요 */
        padding:0 !important;
    }
    .table-text-inner{      
        overflow: hidden;
        display:block;

    }
     .table-text-input {
        border-radius: 0px;
        background-color:white !important;
        box-shadow:none !important;
        border-bottom-width:0 !important;
        width:100%;
        height:100%;
        resize:none;
        border:0 !important;
        overflow-y: hidden;  /*스크롤 제거 */
    }
    /* 우측상단에 표시할 텍스트 */
    .component-hidden-text{
        top:0;
        right:0;
        position:absolute;
        pointer-events:none;
        padding:3px;
        font-size:x-small;
        font-style:italic;
        color:lightgray;
    }
</style>
@code {
    //public List<TableCell> children = new List<TableCell>();

    private List<int> xPositionList = new List<int>();
    private List<int> yPositionList = new List<int>();
    private bool isDraging = false;

    public int Height => Model.Height;
    public int Width => Model.Width;
    public bool Selected => Model.Selected;
    private bool isDbClicked = false;
    ModificationArea modificationArea;

    RadzenTextArea textArea;

    [Parameter]
    public ControlBase Base
    {
        set
        {
            this.Model = value.Model;
        }
    }

    public bool HiddenEditMode
    {
        get
        {
            if (this.Model.IsEditMode)
                return false;
            else
                return true;

        }
    }
    public bool HiddenControl
    {
        get
        {
            if (this.Model.Hidden)
                return false;
            else
                return true;

        }
    }

    Dictionary<int, int> widths = new Dictionary<int, int>();
    Dictionary<int, int> heights = new Dictionary<int, int>();

    public string GetRowHeight(int i)
    {
        if (this.Model.TableInfo.RowHeights is not null)
            return "height:" + this.Model.TableInfo.RowHeights[i] + "px;";
        else
            return "";
    }
    protected override async Task OnInitializedAsync()
    {    
        foreach(ReportComponentModel model in Model.Children)
        {
            int width = model.Width;
            int height = model.Height;

            int col = model.TableCellInfo.Col;
            if(widths.ContainsKey(col) == false)
            {
                widths.Add(col, width);
            }
            int row = model.TableCellInfo.Row;
            if(heights.ContainsKey(row) == false)
            {
                heights.Add(row, height);
            }
        }
    }
    private string cursorStyle = "cursor:default;";
    void OnPointerMove(PointerEventArgs e)
    {
        return;
        if(e.OffsetX < 3 || e.OffsetY < 3 || e.OffsetX > this.Width - 3 || e.OffsetY > this.Height - 3)
        {
            return;
        }

        if (Math.Abs(e.OffsetX) < 3 ||  Math.Abs(e.OffsetX - this.Model.Width ) < 3)
            cursorStyle = "cursor:col-resize;";
        else if (Math.Abs(e.OffsetY) < 3 ||  Math.Abs( e.OffsetY - this.Model.Height) < 3)
            cursorStyle = "cursor:row-resize;";
        else
            cursorStyle = "cursor:default;";
        StateHasChanged();
    }

    public void OnPointerDown(PointerEventArgs e, string value)
    {
        Console.WriteLine("Table.razor - OnPointerDown");
        if(value == "EditArea")
        {
            return; 
        }

        if (Options.State == DesignerOptionService.ActionState.Resize)
        {
            Console.WriteLine("isDragAble - false");
            StateHasChanged();
        }
        else
        {
            StateHasChanged();

            //테이블의경우 일반적으로 마우스 클릭해서 선택하지 않는다. 
            SelectService.OnPointerDown(e, this.Model, this);
            //modificationArea.UpdateElementSize();

            //이거랑 부모쪽으로 이벤트 가는거랑 뭔 상관이냐?
            //드래그 오브젝트에서는 마우스 이벤트를 막지 않기 때문에 거기서 부모로 이동되는듯 하네.?? 근데 아니네??
            if (this.Model.Locked == false)
            {
                ModificationService.UpdateSize(this.Model.Width, this.Model.Height);
                //DragService.StartDrag(Model.Uid, Model.X, Model.Y, Model.Width, Model.Height, e.ClientX, e.ClientY);
                //DragService.Hidden = false;
                //Options.State = DesignerOptionService.ActionState.Drag;
            }
            Console.WriteLine("isDragAble = true;");
        }
    }

    public string GetStyle(string type)
    {
        string name = type.ToLower();
        switch (name)
        {
            case "translate":
                return "translate(" + this.Model.X + "px, " + this.Model.Y + "px);";
            case "width":
                return "width:" + (this.Model.Width) + "px;";
            case "height":
                return "height:" + (this.Model.Height) + "px;";
            case "border":
                if(this.Model.IsOverlap == false)
                {
                    if (this.Model.Border.Use)
                    {
                        if(this.Model.Border.UseIndividualBorders)
                            return 
                            $"{name}-top: {this.Model.Border.Thickness}px {this.Model.Border.Style} {this.Model.Border.TopColor};" +
                            $"{name}-right: {this.Model.Border.Thickness}px {this.Model.Border.Style} {this.Model.Border.RightColor};" +
                            $"{name}-bottom: {this.Model.Border.Thickness}px {this.Model.Border.Style} {this.Model.Border.BottomColor};" +
                            $"{name}-left: {this.Model.Border.Thickness}px {this.Model.Border.Style} {this.Model.Border.LeftColor};";
                        else
                            return $"{name}: {this.Model.Border.Thickness}px {this.Model.Border.Style} {this.Model.Border.Color};";
                    }
                    else
                        return $"{name}: {this.Model.Border.Thickness}px {this.Model.Border.Style} transparent;";
                }
                else
                {
                    return $"{name}: {this.Model.Border.Thickness}px {this.Model.Border.Style} red;";
                }
            case "padding":
                return $"{type.ToLower()} : {CSS.DefaultPadding}px; ";
            case "word-break":
                return "word-break:break-all;";
            case "background-color":
                return $"{type.ToLower()} : {this.Model.BackColor}; ";
            case "font-family":
                return $"{type.ToLower()} : {this.Model.Font.FontFamily}; ";
            case "font-size":
                return $"{type.ToLower()} : {this.Model.Font.FontSize}px; ";
            case "font-style":
                return $"{this.Model.Font.FontStyle};";
            case "align-items":
                return $"{type.ToLower()} : {this.Model.Paragraph.VerticalAlignment}; ";
            case "justify-content":
                return $"{type.ToLower()} : {this.Model.Paragraph.HorizontalAlignment}; ";
            case "color":
                return $"{type.ToLower()} : {this.Model.Font.FontColor}; ";
            case "z-index":
                return $"{type.ToLower()} : {this.Model.ZIndex}; ";
            default:
                return string.Empty;
        }
    }

    string GetClass()
    {
        if (this.Model.Paragraph.HorizontalAlignment == "even")
            return "justify";
        else
            return string.Empty;
    }
    private void OnKeyDown(KeyboardEventArgs e)
    {
        if(e.Key.ToLower() == "escape")
        {
            OnPointerDown(new PointerEventArgs(), "esc");
        }
    }
    //todo : 테이블 사이즈 변경하면 제대로 변경안됨.
}
