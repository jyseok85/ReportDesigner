@inherits ControlBase
@inject SelectionService SelectService
@inject ResizingService ResizeService

@inject DragAndDropService DragService
@inject DesignerOptionService Options
@inject DesignerCSSService CSS
@inject IJSRuntime JsRuntime

@*      @onpointerdown=@(e => OnPointerDown(e, "Control"))
     @onpointerdown:stopPropagation="true" *@
<div class="component"
     tabindex="@Model.TabIndex"
     id = "@Model.Uid"
     @onpointerdown="OnPointerDown"
     @onpointermove="OnPointerMove"
     @onkeydown="OnKeyDown"
     style=@("transform:" + GetStyle("translate") + "position:absolute;" + GetStyle("width") + GetStyle("height") + 
                            GetStyle("background-color") + GetStyle("z-index") + "outline:none;")
     >
  
     <div class="component-hidden-text" hidden=@HiddenControl>
        visibility : hidden
     </div>

     <CascadingValue Value="this">
         <div style="position:absolute;margin:0;top:0;">
             @for(int r = 0; r < Model.TableInfo.RowCount; r++)
             {
                @for(int c = 0; c < Model.TableInfo.ColCount; c++)
                {
                    var childModel = Model.Children?.Find(x => x.TableCellInfo.Col == c && x.TableCellInfo.Row == r);
                    if(childModel is not null)
                    {
                        <Control BaseModel=childModel></Control>     
                    }
                }
             }
         </div>

        @* 테이블의 경우 esc 키를 누를대만 테이블을 선택할 수 있기 때문에 일반적인 예외체크가 없다. *@
         <ResizeArea @ref=ResizeArea Hidden=@(Model.Selected == true ? false : true )></ResizeArea>
     </CascadingValue>
</div>
<style>

    .leftborder{
        border:1px solid red;
    }
    .rightborder{

    }
    
    .table{
        top: 0;
        height: 100%; /*inherit는 부모사이즈를 가져오고, 100%는 변경된 부모사이즈를 가져온다. */
        width: 100%;
        position: absolute;
        overflow: hidden;
        table-layout:fixed; /* 자동 셀크기 증가 막기 */
    }
     .table-text{
        display:flex;
        height: 100%; /*inherit는 부모사이즈를 가져오고, 100%는 변경된 부모사이즈를 가져온다. */
        width: 100%;
        pointer-events: none;
        line-height : 1;  /*기본값은 1이긴한데... 고급옵션에 따라 변경필요 */
        padding:0 !important;
    }
    .table-text-inner{      
        overflow: hidden;
        display:block;

    }
     .table-text-input {
        border-radius: 0px;
        background-color:white !important;
        box-shadow:none !important;
        border-bottom-width:0 !important;
        width:100%;
        height:100%;
        resize:none;
        border:0 !important;
        overflow-y: hidden;  /*스크롤 제거 */
    }
    /* 우측상단에 표시할 텍스트 */
    .component-hidden-text{
        top:0;
        right:0;
        position:absolute;
        pointer-events:none;
        padding:3px;
        font-size:x-small;
        font-style:italic;
        color:lightgray;
    }
</style>
@code {

    private List<int> xPositionList = new List<int>();
    private List<int> yPositionList = new List<int>();
    private bool isDraging = false;

    public int Height => Model.Height;
    public int Width => Model.Width;
    public bool Selected => Model.Selected;
    private bool isDbClicked = false;
    ResizeArea ResizeArea;

    RadzenTextArea textArea;

    [Parameter]
    public ControlBase Base
    {
        set
        {
            this.Model = value.Model;
        }
    }

    public bool HiddenEditMode
    {
        get
        {
            if (this.Model.IsEditMode)
                return false;
            else
                return true;

        }
    }
    public bool HiddenControl
    {
        get
        {
            if (this.Model.Hidden)
                return false;
            else
                return true;

        }
    }

    Dictionary<int, int> widths = new Dictionary<int, int>();
    Dictionary<int, int> heights = new Dictionary<int, int>();

    public string GetRowHeight(int i)
    {
        if (this.Model.TableInfo.RowHeights is not null)
            return "height:" + this.Model.TableInfo.RowHeights[i] + "px;";
        else
            return "";
    }
    protected override async Task OnInitializedAsync()
    {    
        foreach(ReportComponentModel model in Model.Children)
        {
            int width = model.Width;
            int height = model.Height;

            int col = model.TableCellInfo.Col;
            if(widths.ContainsKey(col) == false)
            {
                widths.Add(col, width);
            }
            int row = model.TableCellInfo.Row;
            if(heights.ContainsKey(row) == false)
            {
                heights.Add(row, height);
            }
        }
    }
    public override async Task SetParametersAsync(ParameterView parameters)
    {
        await base.SetParametersAsync(parameters);
    }

    public void MultiSelect(int c, int r, bool select = false)
    {
        if (Options.EventStartObject != null && Options.EventStartObject is Control)
        {
            var obj = Options.EventStartObject as Control;
            int col1 = obj.Model.TableCellInfo.Col;
            int row1 = obj.Model.TableCellInfo.Row;

            int startCol = Math.Min(col1, c);
            int startRow = Math.Min(row1, r);

            int endCol = Math.Max(col1, c);
            int endRow = Math.Max(row1, r);

            foreach (ReportComponentModel model in Model.Children)
            {
                model.Selected = false;
            }

            //칸 한개는 선택하지 않기
            if(startCol == endCol && startRow == endRow)
            {
                foreach (ReportComponentModel model in Model.Children)
                {
                    if (model.TableCellInfo.Col == c && model.TableCellInfo.Row == r)
                    {
                        SelectService.SelectControl(false, model, this);
                    }
                }   
            }
            else
            {     
                foreach (ReportComponentModel model in Model.Children)
                {

                    if (model.TableCellInfo.Col >= startCol && model.TableCellInfo.Col <= endCol && model.TableCellInfo.Row >= startRow && model.TableCellInfo.Row <= endRow)
                    {
                        model.TableCellInfo.IsMultiSelected = true;
                        if (select)
                        {
                            SelectService.SelectControl(true, model, this);
                        }
                    }
                    else
                    {
                        model.TableCellInfo.IsMultiSelected = false;
                        model.Selected = false;
                    }
                }
            }
        }
    }
    public void MergeCell()
    {
        int startCol = -1;
        int startRow = -1;
        int endCol = 0;
        int endRow = 0;
        foreach (ReportComponentModel model in Model.Children)
        {
            if (model.TableCellInfo.IsMultiSelected)
            {
                if(startCol == -1)
                {
                    startCol = model.TableCellInfo.Col;
                    startRow = model.TableCellInfo.Row;
                }
                else
                {

                    startCol = Math.Min(startCol, model.TableCellInfo.Col);
                    startRow = Math.Min(startRow, model.TableCellInfo.Row);
                }

                endCol = Math.Max(endCol, model.TableCellInfo.Col + model.TableCellInfo.ColSpan - 1);
                endRow = Math.Max(endRow, model.TableCellInfo.Row + model.TableCellInfo.RowSpan - 1);
            }
        }

        var unSelectedCell = Model.Children.FindAll(x => x.TableCellInfo.IsMultiSelected == false);

        bool isNotContain = false;
        foreach (ReportComponentModel model in unSelectedCell)
        {
            if (model.TableCellInfo.Col >= startCol && model.TableCellInfo.Col <= endCol && model.TableCellInfo.Row >= startRow && model.TableCellInfo.Row <= endRow)
            {
                isNotContain = true;
                Logger.Instance.Write($"isNotContain {model.TableCellInfo.Col} {model.TableCellInfo.Row}", LogLevel.Warning);
                return;
            }
        }

        var targetCell = Model.Children.Find(x => x.TableCellInfo.Col == startCol && x.TableCellInfo.Row == startRow);
        if(targetCell == null)
        {
            Logger.Instance.Write($"targetCell is null - 아마도 병합된 셀인데 기준셀로 착각해서 나오는 현상일듯.", LogLevel.Warning);
            return;
        }
        targetCell.TableCellInfo.ColSpan = endCol - startCol + 1;
        targetCell.TableCellInfo.RowSpan = endRow - startRow + 1;

        var hideCell = Model.Children.FindAll(x => x.TableCellInfo.IsMultiSelected);
        //가져와서 메인놈 빼고 전부 삭제??? 삭제해야 분할할때 계산이 편할듯.
        foreach (ReportComponentModel model in hideCell)
        {
            if(model == targetCell)
                continue;
            model.Hidden = true;
        }

        //숨기는 셀을 전부 삭제해준다. 
        for(int i =0; i < Model.Children.Count; i++)
        {
            if(Model.Children[i].Hidden)
            {
                Model.Children.RemoveAt(i);
                i--;
            }
        }

        StateHasChanged();

        //선택된 셀들을 전부 해제한다. 
        foreach (ReportComponentModel model in Model.Children)
        {
            model.Selected = false;
            model.TableCellInfo.IsMultiSelected = false;
        }

        if(targetCell.TableCellInfo.Col == 0 && targetCell.TableCellInfo.ColSpan == Model.TableInfo.ColCount)
        {
            //컬럼 전체를 병합했다는 의미이며, 이때는 테이블의 컬럼수를 변경해준다.
            if(targetCell.TableCellInfo.RowSpan > 1)
            {
                int r = targetCell.TableCellInfo.Row;
                for(int i = r + 1; i < r + targetCell.TableCellInfo.RowSpan; i++)
                {
                    Model.TableInfo.RowPositions.Remove(i);
                }

                for (int i = r; i < r + targetCell.TableCellInfo.RowSpan; i++)
                {
                    Model.TableInfo.RowHeights.Remove(i);
                }
                //그냥 다 날려버리고 다시 넣자.
            }
        }

    }
    private string cursorStyle = "cursor:default;";
    void OnPointerMove(PointerEventArgs e)
    {
        return;
        if(e.OffsetX < 3 || e.OffsetY < 3 || e.OffsetX > this.Width - 3 || e.OffsetY > this.Height - 3)
        {
            return;
        }

        if (Math.Abs(e.OffsetX) < 3 ||  Math.Abs(e.OffsetX - this.Model.Width ) < 3)
            cursorStyle = "cursor:col-resize;";
        else if (Math.Abs(e.OffsetY) < 3 ||  Math.Abs( e.OffsetY - this.Model.Height) < 3)
            cursorStyle = "cursor:row-resize;";
        else
            cursorStyle = "cursor:default;";
        StateHasChanged();
    }
    public void OnPointerDown(PointerEventArgs e)
    {
        if(e.Buttons == 1)
        {
            foreach(ReportComponentModel model in Model.Children)
            {
                model.TableCellInfo.IsMultiSelected = false;
            }
        }

        if (Options.EventStartObject != null)
        {
            Logger.Instance.Write("Return " + Options.State.ToString());
            return;                  
        }


        //드래그나 리사이즈일경우에 호출 된다. 
        Logger.Instance.Write(Options.State.ToString());
        Options.EventStartObject = this;


        if (Options.State == DesignerOptionService.ActionState.Resize)
        {

        }
        else if(Options.State == DesignerOptionService.ActionState.Drag)
        {
            //todo : 테이블은 외각 라인을 잡고 드래그 해주는데, 테이블을 밷드 끝으로 붙일경우 마우스가 밴드를 벗어나서 이동이 취소되는 현상이 있다.
            //큰 문제는 아니지만, 추후 개선이 필요할수도 있다.
            if (this.Model.Locked == false)
            {
                ResizeService.UpdateSize(this.Model.Width, this.Model.Height);
                Logger.Instance.Write($"DRAG START {e.ClientX}, {e.ClientY}");
                DragService.StartDrag(Model.Uid, Model.X, Model.Y, Model.Width, Model.Height, e.ClientX, e.ClientY);
                Options.State = DesignerOptionService.ActionState.Drag;
            }  
        }
        else
        {
            SelectControl();
        }
    }

    public string GetStyle(string type)
    {
        string name = type.ToLower();
        switch (name)
        {
            case "translate":
                return "translate(" + this.Model.X + "px, " + this.Model.Y + "px);";
            case "width":
                return "width:" + (this.Model.Width) + "px;";
            case "height":
                return "height:" + (this.Model.Height) + "px;";
            case "border":
                if(this.Model.IsOverlap == false)
                {
                    if (this.Model.Border.Use)
                    {
                        if(this.Model.Border.UseIndividualBorders)
                            return 
                            $"{name}-top: {this.Model.Border.Thickness}px {this.Model.Border.Style} {this.Model.Border.TopColor};" +
                            $"{name}-right: {this.Model.Border.Thickness}px {this.Model.Border.Style} {this.Model.Border.RightColor};" +
                            $"{name}-bottom: {this.Model.Border.Thickness}px {this.Model.Border.Style} {this.Model.Border.BottomColor};" +
                            $"{name}-left: {this.Model.Border.Thickness}px {this.Model.Border.Style} {this.Model.Border.LeftColor};";
                        else
                            return $"{name}: {this.Model.Border.Thickness}px {this.Model.Border.Style} {this.Model.Border.Color};";
                    }
                    else
                        return $"{name}: {this.Model.Border.Thickness}px {this.Model.Border.Style} transparent;";
                }
                else
                {
                    return $"{name}: {this.Model.Border.Thickness}px {this.Model.Border.Style} red;";
                }
            case "padding":
                return $"{type.ToLower()} : {CSS.GlobalPadding}px; ";
            case "word-break":
                return "word-break:break-all;";
            case "background-color":
                return $"{type.ToLower()} : {this.Model.BackColor}; ";
            case "font-family":
                return $"{type.ToLower()} : {this.Model.Font.FontFamily}; ";
            case "font-size":
                return $"{type.ToLower()} : {this.Model.Font.FontSize}px; ";
            case "font-style":
                return $"{this.Model.Font.FontStyle};";
            case "align-items":
                return $"{type.ToLower()} : {this.Model.Paragraph.VerticalAlignment}; ";
            case "justify-content":
                return $"{type.ToLower()} : {this.Model.Paragraph.HorizontalAlignment}; ";
            case "color":
                return $"{type.ToLower()} : {this.Model.Font.FontColor}; ";
            case "z-index":
                return $"{type.ToLower()} : {this.Model.ZIndex}; ";
            default:
                return string.Empty;
        }
    }

    string GetClass()
    {
        if (this.Model.Paragraph.HorizontalAlignment == "even")
            return "justify";
        else
            return string.Empty;
    }


    private void OnKeyDown(KeyboardEventArgs e)
    {
        Logger.Instance.Write(e.Key);

        if(e.Key.ToLower() == "escape")
        {
            SelectControl();
        }
    }

    public void SelectControl()
    {
        Logger.Instance.Write("");
        Logger.Instance.Write($"{Model.Type} {Model.X} {Model.Y} {Model.Width} {Model.Height}", Microsoft.Extensions.Logging.LogLevel.Trace);

        //자식 컨트롤 선택된걸 전체 해제한다.
        foreach (ReportComponentModel model in Model.Children)
        {
            model.Selected = false;
        }

        //테이블의경우 일반적으로 마우스 클릭해서 선택하지 않는다. 
        SelectService.OnPointerDown(new PointerEventArgs(), this.Model, this);
        //ResizeArea.UpdateElementSize();

        //이거랑 부모쪽으로 이벤트 가는거랑 뭔 상관이냐?
        //드래그 오브젝트에서는 마우스 이벤트를 막지 않기 때문에 거기서 부모로 이동되는듯 하네.?? 근데 아니네??
        if (this.Model.Locked == false)
        {
            ResizeService.UpdateSize(this.Model.Width, this.Model.Height);
        }

        Options.FireControlSelectionChangedEvent();
    }
    //todo : 테이블 사이즈 변경하면 제대로 변경안됨.

    //todo : 병합 이후에 깔끔하게 사이즈가 맞춰지지 않으며, 병합된 셀 또한 사이즈 조절이 정상적이지 못하다.


    //todo : GridResizingService가 아니라. 테이블의 클래스로 로직을 빼야하지 않을까 생각된다.  
}
