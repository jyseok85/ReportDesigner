@inherits ControlBase
@inject SelectedControlService SelectService
@inject ControlResizeService ResizeService

@inject DragAndDropService DragService
@inject DesignerOptionService Options
@inject DesignerCSSService CSS

     @* @onpointerdown:stopPropagation="true" *@
<div class="cell"
     tabindex="@Model.TabIndex"
     id = "@Model.Uid"


     @onpointerdown=@(e => OnPointerDown(e))
        @onpointerup:stopPropagation="true"

     @ondrag:preventDefault=true
     @ondragenter:preventDefault=true
     @ondragover:preventDefault=true
     @ondblclick="@( (x) => OnDbClick(x))"
     style=@("transform:" + CellPosition() + "position:absolute;" +GetSize() + 
                            GetStyle("border")+ GetStyle("background-color") + GetStyle("z-index"))
     >
    @*  <CascadingValue Value="this">
        @if(DragService.Hidden && !Model.Locked)
        {
            <ResizeArea @ref=ResizeArea></ResizeArea>
        }
     </CascadingValue> *@
    <div class="overlay-text" hidden=@HiddenControl>
        visibility : hidden
     </div>



    <div class="cell-text"  
      @ondrag:stopPropagation="true"
        @onpointerdown:stopPropagation="true"
        @onpointerup:stopPropagation="true"
        @onkeydown:stopPropagation="true"
         @onkeyup=OnEditorKeyUp
         style=@(OuterTextStyle) >
        <div class="component-text-inner" style=@(InnerTextStyle) hidden=@this.Model.IsEditMode>
            @Model.Text
         </div>
        
 
    </div>
    <RadzenTextArea @ondrag:stopPropagation="true"
                    @onpointerdown:stopPropagation="true"
                    @onpointerup:stopPropagation="true"
                    @onkeydown:stopPropagation="true"

                    @ref=textArea
                    @bind-Value=@Model.Text
                    class="w-100 cell-text-input"
                    Style=@InputTextStyle hidden=@HiddenEditMode />
</div>

@code {
    public string CellPosition()
    {
        //return $"translate({this.Model.TableCellInfo.Col * Width}px,{this.Model.TableCellInfo.Row * Height}px);";

        int row = this.Model.TableCellInfo.Row;
        int col = this.Model.TableCellInfo.Col;
        return $"translate({this.parent.Model.TableInfo.ColPositions[col]}px,{this.parent.Model.TableInfo.RowPositions[row]}px);";

    }

    public string GetSize()
    {
        int row = this.Model.TableCellInfo.Row;
        int col = this.Model.TableCellInfo.Col;
        int width = this.parent.Model.TableInfo.ColWidths[col];
        int height = this.parent.Model.TableInfo.RowHeights[row];
        return $"width:{width}px;height:{height}px;";
    }
    public string OuterTextStyle
    {
        get
        {
            string style =
                GetStyle("padding") +
                GetStyle("align-items") + 
                GetStyle("justify-content");
            return style;
        }
    }
    public string InnerTextStyle
    {
        get
        {
            string style =
                           // GetStyle("padding") + //장평조절 기능때문에 여기서 사용(이해안됨..  다시 위에서 사용)

                           GetStyle("font-style") +
                           GetStyle("font-size") +
                           GetStyle("font-family") +

                           GetStyle("text-align") +
                           GetStyle("color") +
                           GetStyle("line-height") +
                           GetStyle("transform") +

                           GetStyle("transform-origin") +
                           GetStyle("letter-spacing") +
                           //GetStyle("overflow") +
                           GetStyle("overflow-text") 
                           //todo : [고급] overflow:visible 하면 좌우 셀로 넘어가서 텍스트 표시가능
                           //visible 처리시 좌측 or 우측정렬만 활성화 시킴 
                           // + "Width:100%;height:100%;"
                           //letter-spacing : 글자간의 간격 조절
                           // word-spacing : 단어간의 간격 조절
                           // transform : scale(1.5,1.5) -> 글자크기 조절
                           ;
            return style;
        }
    }

    public string InputTextStyle
    {
        get
        {
            string style = 
                           GetStyle("padding") +
                           GetStyle("font-size") +
                           GetStyle("font-style") +
                           GetStyle("font-family") +
                           //포커스일때 기본컨트롤 스타일 삭제
                           "border:0px;"  +          
                           "box-shadow:none;" +
                           //칸이 전부 안차서 변경
                           "height:100%;" +
                           "background-color:white;"+
                           "border-radius:0px;"+
                           //리사이즈 컨트롤 삭제
                           "resize:none;";      
            return style;
        }
    }

    public int Height => Model.Height;
    public int Width => Model.Width;
    private bool isDbClicked = false;
    ResizeArea ResizeArea;

    [CascadingParameter]
    public ControlBase parent { get; set; }

    RadzenTextArea textArea;
    [Parameter]
    public ReportComponentModel Base
    {
        set
        {
            this.Model = value;
        }
    }

    public bool HiddenEditMode
    {
        get
        {
            if (this.Model.IsEditMode)
                return false;
            else
                return true;

        }
    }
    public bool HiddenControl
    {
        get
        {
            if (this.Model.Hidden)
                return false;
            else
                return true;

        }
    }

    async Task OnPointerDown(PointerEventArgs e)
    {
        Logger.Instance.Write("");
        // 1. NULL 일경우
        // 2. 부모에서 전파된게 아닐 경우
        // 3. 같은 셀일 경우는 예외
        if (Options.EventStartObject != null && Options.EventStartObject != this.parent)
        {
            if(Options.EventStartObject is Cell)
            {
                var cell = Options.EventStartObject as Cell;
                cell.Model.IsEditMode = false;
            }
            else
            {
                return;
            }
        }
        Options.EventStartObject = this;
        Logger.Instance.Write("EventStartObject");


        if (Options.State == DesignerOptionService.ActionState.Resize)
        {
            StateHasChanged();
        }
        else
        {
            StateHasChanged();
            SelectService.OnPointerDown(e, this.Model, parent);
        }
    }

    public string GetStyle(string type)
    {
        var style= CSS.GetModelStyle(type, this.Model);
        return style;
    }


    public async Task OnDbClick(MouseEventArgs args)
    {
        if (this.Model.Locked is true)
        {
            Logger.Instance.Write("Locked!!");
            return;
        }

        this.Model.IsEditMode = true;
        Options.State = DesignerOptionService.ActionState.Edit;
        DragService.Hidden = false;
        while (this.textArea == null)
            await Task.Delay(10);

        await this.textArea.Element.FocusAsync();
        await this.textArea.Element.FocusAsync();
        DragService.End();
        this.StateHasChanged();
    }
    private void OnEditorKeyUp(KeyboardEventArgs e)
    {
        if(e.Key.Contains("Escape"))
        {
            Logger.Instance.Write("Editor - Escape");

            this.Model.IsEditMode = false;
            Options.State = DesignerOptionService.ActionState.None;
            this.StateHasChanged();
            parent.CallRazorComponent("SelectControl");
        }
    }








    private async Task SetEditMode()
    {
        
    Logger.Instance.Write("");
        if (this.Model.Locked is true)
        {
            Logger.Instance.Write("Locked!!");
            return;
        }

        this.Model.IsEditMode = true;
        Options.State = DesignerOptionService.ActionState.Edit;
        DragService.Hidden = true;
        while (this.textArea == null)
            await Task.Delay(10);

        await this.textArea.Element.FocusAsync();
        await this.textArea.Element.FocusAsync();
        DragService.End();
        this.StateHasChanged();
            Logger.Instance.Write("");
    }
}
