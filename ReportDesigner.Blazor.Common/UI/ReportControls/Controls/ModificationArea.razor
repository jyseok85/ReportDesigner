@inject DesignerOptionService Options
@inject ControlModificationServcie ModificationService

@* stopPropagation: 상위 Element로 이벤트전달을 막는다. *@
@* 모든 드래그 이벤트를 막은 이유는 순간적으로 드래그시 상위 Element로 이벤트가 이동되어서 잘못된 현상이 발생하기 때문이다.*@
<div class="resize-area"
@ondrag:preventDefault="true"
@ondrag:stopPropagation="true"
@ondragend:preventDefault="true"
@ondragend:stopPropagation="true"
@ondragenter:preventDefault="true"
@ondragenter:stopPropagation="true"
@ondragleave:preventDefault="true"
@ondragleave:stopPropagation="true"
@ondragover:preventDefault="true"
@ondragover:stopPropagation="true"
@ondragstart:preventDefault="true"
@ondragstart:stopPropagation="true"
@onpointerdown:preventDefault="true"
@onpointermove:preventDefault="true"

     style=@("width:" + (ModificationService.Width) + "px;height:" + (ModificationService.Height) + "px;" +
     GetTransform() + "border:1px solid #337ab7") hidden=@(parent.Selected == true ? false : true )>


    <div class="ui-resize-handle ui-resizable-w" @onpointerdown='e=>OnResizePointerDown(e,"w")' />
    <div class="ui-resize-handle ui-resizable-e" @onpointerdown='e=>OnResizePointerDown(e,"e")' />
    <div class="ui-resize-handle ui-resizable-s" @onpointerdown='e=>OnResizePointerDown(e,"s")' />
    <div class="ui-resize-handle ui-resizable-n" @onpointerdown='e=>OnResizePointerDown(e,"n")' />
    <div class="ui-resize-handle ui-resizable-se" @onpointerdown='e=>OnResizePointerDown(e,"se")' />
    <div class="ui-resize-handle ui-resizable-sw" @onpointerdown='e=>OnResizePointerDown(e,"sw")' />
    <div class="ui-resize-handle ui-resizable-ne" @onpointerdown='e=>OnResizePointerDown(e,"ne")' />
    <div class="ui-resize-handle ui-resizable-nw" @onpointerdown='e=>OnResizePointerDown(e,"nw")' />
</div>
<style>
    .ui-resizable-w {
        top: 50%;
        margin-top: -3px;
        left: -8px;
        cursor: w-resize;
    }

    .ui-resizable-e {
        top: 50%;
        margin-top: -3px;
        right: -8px;
        cursor: e-resize;
    }

    .ui-resizable-s {
        left: 50%;
        margin-left: -3px;
        bottom: -8px;
        cursor: s-resize;
    }

    .ui-resizable-n {
        left: 50%;
        margin-left: -3px;
        top: -8px;
        cursor: n-resize;
    }

    .ui-resizable-se {
        bottom: -8px;
        right: -8px;
        cursor: se-resize;
    }

    .ui-resizable-sw {
        bottom: -8px;
        left: -8px;
        cursor: sw-resize;
    }

    .ui-resizable-ne {
        top: -8px;
        right: -8px;
        cursor: ne-resize;
    }

    .ui-resizable-nw {
        top: -8px;
        left: -8px;
        cursor: nw-resize;
    }

    .ui-resize-handle {
        position: absolute;
        width: 6px;
        height: 6px;
        font-size: 1px;
        border: 1px solid #333;
        background-color: transparent;
        visibility: inherit;
        z-index:95;
        display:block;
    }
</style>

@code {
    [CascadingParameter]
    public Control parent { get; set; }


    void OnResizePointerDown(PointerEventArgs e, string type)
    {
        Console.WriteLine($"ModificationArea - OnResizePointerDown : {type}");
        ModificationService.ActionStart(e, type, parent.Model.Uid);
        Options.State = DesignerOptionService.ActionState.Resize;
    }

    string GetTransform()
    {
        //부모컨트롤의 border에 따라서 위치를 변경시켜준다.
        return "transform:translate(" + (ModificationService.X - parent.Model.Border.Left) + "px, " + (ModificationService.Y- parent.Model.Border.Top) + "px);";
    }

    public void UpdateElementSize()
    {
        ModificationService.Width = parent.Model.Width;
        ModificationService.Height = parent.Model.Height;
        StateHasChanged();
    }
}
