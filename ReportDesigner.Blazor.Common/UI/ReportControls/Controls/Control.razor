@inherits ControlBase
@inject SelectionService SelectionService
@inject ResizingService ResizeService
@inject DragAndDropService DragService
@inject DesignerOptionService Options
@inject DesignerCSSService CSS
@inject IJSRuntime JsRuntime

@* keydown 에 pagenation을 막으면 컨트롤 이동을 할 수 없음. *@
<div class="component"
     tabindex="@Model.TabIndex"
     id="@Model.Uid"
     @onpointerdown=@(e => OnPointerDown(e, "Control"))
     @ondblclick="@( (x) => OnDbClick(x))"
     @onkeydown="@( (x) => OnKeyDown(x))"
     style=@GetComponentStyle()>

    @if (IsShowResizeArea())
    {
        <CascadingValue Value="this">
            <ResizeArea Hidden=@(Model.Selected == true ? false : true )></ResizeArea>
        </CascadingValue>
    }
    <div class="overlay-text" hidden=@(this.Model.Hidden == true ? false : true)>visibility : hidden</div>

    <div class="component-text" style=@GetDisplayTextStyle(true)>
        <div class="component-text-inner" style=@GetDisplayTextStyle(false)>
            @Model.Text
        </div>
    </div>
    <RadzenTextArea @ref=textArea
                    @ondrag:stopPropagation="true"
                    @onpointerdown:stopPropagation="true"
                    @onpointerup:stopPropagation="true"
                    @onkeydown:stopPropagation="true"
                    @onkeyup=OnEditorKeyUp 
                    class="w-100"
                    Style=@GetInputTextStyle() hidden=@(this.Model.IsEditMode == true ? false : true)
                    Change=@(args => OnChange(args, "TextArea with 3 rows and 30 columns")) />
</div>

@code {
    [Parameter]
    public ControlBase Base
    {
        set
        {
            this.Model = value.Model;
        }
    }

    [Parameter]
    public ReportComponentModel BaseModel
    {
        set
        {
            this.Model = value;
        }
    }

    [CascadingParameter]
    public ControlBase parent { get; set; }

    RadzenTextArea? textArea;
    private bool isCanceled = false;
    private string preText = "";





    /// <summary>
    /// 내부 텍스트 사이즈 변경 이벤트 등록
    /// </summary>
    /// <param name="firstRender"></param>
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await JsRuntime.InvokeAsync<object>("RegisterInnerTextResizeCallback", Model.Uid);
        }
    }
    /// <summary>
    /// 드래그나 잠겨있거나 텍스트 입력할때 수정영역이 안보이게 하기 위해서
    /// </summary>
    public bool IsShowResizeArea()
    {
        List<bool> conditions = new List<bool>();
        //아래 조건중 하나라도 만족할 경우에 리사이즈 영역을 숨긴다.
        conditions.Add(DragService.Hidden == false);
        conditions.Add(Model.Locked == true);
        conditions.Add(this.Model.IsEditMode == true);
        conditions.Add(this.Model.Type == ReportComponentModel.Control.TableCell);

        var isContainTrue = conditions.Find(x => x == true);

        if (isContainTrue)
            return false;
        else
            return true;
    }
    private string GetComponentStyle()
    {
        string style = "transform:" + GetTranslate() +
                        GetWidthHeight() +
                        GetStyle("border") +
                        GetStyle("background-color") +
                        GetStyle("z-index") +
                       "position:absolute;" +
                       "ime-mode:active;";
        return style;

        string GetTranslate()
        {
            string translate = "";
            if (Model.Type == ReportComponentModel.Control.TableCell)
            {
                int row = this.Model.TableCellInfo.Row;
                int col = this.Model.TableCellInfo.Col;
                translate = $"translate({this.Model.Parent?.TableInfo.ColPositions[col]}px,{this.Model.Parent?.TableInfo.RowPositions[row]}px);";
            }
            else
            {
                translate = GetStyle("translate");
            }
            return translate;
        }

        string GetWidthHeight()
        {
            string size = "";
            if (Model.Type == ReportComponentModel.Control.TableCell)
            {
                int row = this.Model.TableCellInfo.Row;
                int col = this.Model.TableCellInfo.Col;
                if(this.Model.Parent is not null)
                {
                    int width = this.Model.Parent.TableInfo.ColWidths[col];
                    int height = this.Model.Parent.TableInfo.RowHeights[row];
                    size = $"width:{width}px;height:{height}px;";
                }
            }
            else
            {
                size = GetStyle("width") + GetStyle("height");
            }
            return size;
        }
    }
    private string GetDisplayTextStyle(bool outer)
    {
        if (outer)
        {
            string style =
                    GetStyle("align-items") +
                    GetStyle("padding") +
                    GetStyle("justify-content");
            return style;

        }
        else
        {
            string style =
                    GetStyle("font-style") +
                    GetStyle("font-size") +
                    GetStyle("font-family") +
                    //폰트컬러
                    GetStyle("color") +
                    GetStyle("text-align") +
                    GetStyle("line-height") +
                    GetStyle("transform") +
                    GetStyle("transform-origin") +
                    GetStyle("letter-spacing") +
                    GetStyle("overflow-text")
                    //debug

                    + (Options.Debugging == true ? $"background-color:{CSS.DebugStyleColor.Background}" : "")
                    ;
            return style;
        }
    }
    private string GetInputTextStyle()
    {
        string style = GetStyle("padding") +
                       GetStyle("font-size") +
                       GetStyle("font-style") +
                       GetStyle("font-family") +
                       //포커스일때 기본컨트롤 스타일 삭제
                       "border:0px;" +
                       "border-radius:0px;" +
                       "line-height:1;" +
                       "position:absolute;" +
                       "height:100%;" +
                       "top:0;" +
                       "box-shadow:none;" +
                       //리사이즈 컨트롤 삭제
                       "resize:none;";
        return style;
    }

    private void OnPointerDown(PointerEventArgs e, string value)
    {
        Console.ForegroundColor = ConsoleColor.Green;
        Logger.Instance.Write("");
        Console.ForegroundColor = ConsoleColor.White;
        if (Options.EventStartObject != null)
        {
            if (Options.EventStartObject is Control)
            {
                var obj = Options.EventStartObject as Control;
                obj.Model.IsEditMode = false;
            }
            else
            {
                return;
            }
        }

        Options.EventStartObject = this;

        Logger.Instance.Write("EventStartObject");

        if (Options.State == DesignerOptionService.ActionState.Resize)
        {
            StateHasChanged();
        }
        else
        {
            StateHasChanged();

            if(Model.Type == ReportComponentModel.Control.TableCell)
            {
                SelectionService.OnPointerDown(e, this.Model, this.parent);
            }
            else
            {
                SelectionService.OnPointerDown(e, this.Model, this);

            }


            //이거랑 부모쪽으로 이벤트 가는거랑 뭔 상관이냐?
            //드래그 오브젝트에서는 마우스 이벤트를 막지 않기 때문에 거기서 부모로 이동되는듯 하네.?? 근데 아니네??
            if (this.Model.Locked == false && this.parent is not Table)
            {
                ResizeService.UpdateSize(this.Model.Width, this.Model.Height);

                DragService.StartDrag(Model.Uid, Model.X, Model.Y, Model.Width, Model.Height, e.ClientX, e.ClientY);
                //DragService.Hidden = false;
                Options.State = DesignerOptionService.ActionState.Drag;
            }
        }
    }

    private string GetStyle(string type)
    {
        var style = CSS.GetModelStyle(type, this.Model);
        return style;
    }


    public async Task OnDbClick(MouseEventArgs args)
    {
        Logger.Instance.Write("");
        if (this.Model.Locked is true)
        {
            Logger.Instance.Write("Locked!!");
            return;
        }

        this.Model.IsEditMode = true;
        this.preText = this.Model.Text;
        this.isCanceled = false;
        Options.State = DesignerOptionService.ActionState.Edit;
        DragService.End();

        while (this.textArea == null)
            await Task.Delay(10);

        this.textArea.Value = this.Model.Text;
        await this.textArea.Element.FocusAsync();
        await this.textArea.Element.FocusAsync();
        this.StateHasChanged();
    }

    private void OnEditorKeyUp(KeyboardEventArgs e)
    {
        //기능정의 : esc키를 누르면 입력을 취소한다.
        //기능정의 : ctrl + enter키를 누르면 입력을 완료한다.
        if (e.Key.Contains("Escape"))
        {
            Logger.Instance.Write("Editor - Escape");

            this.Model.IsEditMode = false;
            this.isCanceled = true;
            Options.State = DesignerOptionService.ActionState.None;
            this.StateHasChanged();
        }
        if (e.CtrlKey && e.Key == "Enter")
        {
            Logger.Instance.Write("Editor - Enter");

            this.Model.IsEditMode = false;
            Options.State = DesignerOptionService.ActionState.None;
            this.StateHasChanged();
        }
    }
    private async Task OnKeyDown(KeyboardEventArgs e)
    {
        //셀에서 키다운 되는것이 어디까지 가는지도 봐야함..
        //점점 꼬여가네.
    }
    private async void OnChange(string value, string name)
    {
        Logger.Instance.Write(value);
        if (isCanceled == true)
            this.Model.Text = preText;
        else
            this.Model.Text = value;


        StateHasChanged();


        Options.RefreshBody();
    }

   

    //todo : 컨트롤 사이즈를 변경할때 밴드 영역을 벗어나서 이벤트 끊어질때 먹통됨.

}
