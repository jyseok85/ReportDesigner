@inherits ControlBase
@inject SelectedControlService SelectService
@inject DragAndDropService DragService
@inject DesignerOptionService Options

<div class="component"
     tabindex="@Model.TabIndex"
     @onpointerdown=@(e => OnPointerDown(e, "Control"))
     @onpointerdown:stopPropagation="true"
     @ondblclick="@( (x) => OnDbClick(x))"
     style=@("transform:" + GetStyle("translate") + "position:absolute;" + GetStyle("width") + GetStyle("height") + GetStyle("border")+ GetStyle("background-color") )>
     <CascadingValue Value="this">
        @if(DragService.Hidden)
        {
            <ModificationArea @ref=modificationArea></ModificationArea>
        }
     </CascadingValue>


     <div style=@("top:0;height:inherit;width:inherit;position:absolute;pointer-events: none;overflow:hidden;" + GetStyle("padding") +GetStyle("word-break"))>
        @Model.Text
     </div>
     <RadzenTextArea @ref=textArea
        @ondrag:stopPropagation="true"
        @onpointerdown:stopPropagation="true"
        @onpointerup:stopPropagation="true"
        @onkeydown:stopPropagation="true"
        @bind-Value=@Model.Text
        class="w-100" 
        Style="top:0;height:100%;width:100%;position:absolute;
        --rz-text-area-padding:10px;border-radius:0px;"
                    hidden=@HiddenEditMode />
</div>

<style>
    .component{
        box-sizing: border-box;
    }
</style>
@code {
    public int Height => Model.Height;
    public int Width => Model.Width;
    public bool Selected => Model.Selected;
    private bool isDbClicked = false;
    ModificationArea modificationArea;

    RadzenTextArea textArea;
    [Parameter]
    public ControlBase Base
    {
        set
        {
            this.Model = value.Model;
        }
    }

    public bool HiddenEditMode
    {
        get
        {
            if (this.Model.IsEditMode)
                return false;
            else
                return true;

        }
    }
    void OnPointerDown(PointerEventArgs e, string value)
    {
        Console.WriteLine("Control.razor - OnPointerDown");
        if(value == "EditArea")
        {
            return; 
        }

        if (Options.State == DesignerOptionService.ActionState.Resize)
        {
            Console.WriteLine("isDragAble - false");
            StateHasChanged();
        }
        else
        {
            StateHasChanged();
            SelectService.OnPointerDown(e, this.Model);
            modificationArea.UpdateElementSize();

            //이거랑 부모쪽으로 이벤트 가는거랑 뭔 상관이냐?
            //드래그 오브젝트에서는 마우스 이벤트를 막지 않기 때문에 거기서 부모로 이동되는듯 하네.?? 근데 아니네??

            DragService.StartDrag(Model.Uid, Model.X, Model.Y, Model.Width, Model.Height, e.ClientX, e.ClientY);
            //DragService.Hidden = false;
            Options.State = DesignerOptionService.ActionState.Drag;
            Console.WriteLine("isDragAble = true;");
        }
    }

    public string GetStyle(string type)
    {
        string name = type.ToLower();
        switch (name)
        {
            case "translate":
                return "translate(" + this.Model.X + "px, " + this.Model.Y + "px);";
            case "width":
                return "width:" + (this.Model.Width) + "px;";
            case "height":
                return "height:" + (this.Model.Height) + "px;";
            case "border":
                if(this.Model.IsOverlap == false)
                {
                    if (this.Model.UseBorder)
                    {
                        if(this.Model.Border.UseIndividualBorders)
                            return 
                            $"{name}-top: {this.Model.BorderThickness}px {this.Model.BorderStyle} {this.Model.Border.TopColor};" +
                            $"{name}-right: {this.Model.BorderThickness}px {this.Model.BorderStyle} {this.Model.Border.RightColor};" +
                            $"{name}-bottom: {this.Model.BorderThickness}px {this.Model.BorderStyle} {this.Model.Border.BottomColor};" +
                            $"{name}-left: {this.Model.BorderThickness}px {this.Model.BorderStyle} {this.Model.Border.LeftColor};";
                        else
                            return $"{name}: {this.Model.BorderThickness}px {this.Model.BorderStyle} {this.Model.BorderColor};";
                    }
                    else
                        return $"{name}: {this.Model.BorderThickness}px {this.Model.BorderStyle} transparent;";
                }
                else
                {
                    return $"{name}: {this.Model.BorderThickness}px {this.Model.BorderStyle} red;";
                }
            case "padding":
                return "padding:10px;";
            case "word-break":
                return "word-break:break-all;";
            case "background-color":
                return type.ToLower() + ":" + this.Model.BackColor;
            default:
                return string.Empty;
        }
    }


    async Task OnDbClick(MouseEventArgs args)
    {
        Console.WriteLine("OnDoubleClick");
        this.Model.IsEditMode = true;
        Options.State = DesignerOptionService.ActionState.Edit;
        DragService.Hidden = false;
        while (this.textArea == null)
            await Task.Delay(10);

        await this.textArea.Element.FocusAsync();
        await this.textArea.Element.FocusAsync();
    }


}
