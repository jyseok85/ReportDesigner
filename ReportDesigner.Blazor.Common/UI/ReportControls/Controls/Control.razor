@inherits ControlBase
@inject SelectedControlService SelectService
@inject DragAndDropService DragService
@inject DesignerOptionService Options

<div class="component"
     tabindex="@Model.TabIndex"
     @onpointerdown=OnPointerDown
     @onpointerdown:stopPropagation="true"
     style=@("transform:" + GetStyle("translate") + "position:absolute;" + GetStyle("width") + GetStyle("height") + GetStyle("border"))>
     <CascadingValue Value="this">
        <ModificationArea @ref =modificationArea></ModificationArea>
     </CascadingValue>
    @* <_05_ResizeArea Model=BaseControlModel.ResizeModel></_05_ResizeArea> *@
</div>

<style>
    .component{
        box-sizing: border-box;
    }
</style>
@code {
    public int Height => Model.Height;
    public int Width => Model.Width;
    public bool Selected => Model.Selected;

    ModificationArea modificationArea;
    [Parameter]
    public ControlBase Base
    {
        set
        {
            this.Model = value.Model;
        }
    }

    void OnPointerDown(PointerEventArgs e)
    {
        Console.WriteLine("Control.razor - OnPointerDown");

        if (Options.State == DesignerOptionService.ActionState.Resize)
        {
            Console.WriteLine("isDragAble - false");
            StateHasChanged();
        }
        else
        {
            StateHasChanged();
            SelectService.OnPointerDown(e, this.Model);
            modificationArea.UpdateElementSize();

            //이거랑 부모쪽으로 이벤트 가는거랑 뭔 상관이냐?
            //드래그 오브젝트에서는 마우스 이벤트를 막지 않기 때문에 거기서 부모로 이동되는듯 하네.?? 근데 아니네??

            DragService.StartDrag(Model.Uid, Model.X, Model.Y, Model.Width, Model.Height, e.ClientX, e.ClientY);
            //DragService.Hidden = false;
            Options.State = DesignerOptionService.ActionState.Drag;
            Console.WriteLine("isDragAble = true;");
        }
    }

    public string GetStyle(string type)
    {
        switch (type.ToLower())
        {
            case "translate":
                return "translate(" + this.Model.X + "px, " + this.Model.Y + "px);";
            case "width":
                return "width:" + (this.Model.Width) + "px;";
            case "height":
                return "height:" + (this.Model.Height) + "px;";
            case "border":
                if (this.Model.DrawBorder)
                    return "border: 1px solid grey;";
                else
                    return "border: 1px solid transparent;";
            default:
                return string.Empty;
        }
    }
   
  
}
