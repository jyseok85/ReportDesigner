@inherits ControlBase
@inject SelectedControlService SelectService
@inject ControlModificationServcie ModificationService

@inject DragAndDropService DragService
@inject DesignerOptionService Options
@inject DesignerCSSService CSS

<div class="component"
     tabindex="@Model.TabIndex"
     @onpointerdown=@(e => OnPointerDown(e, "Control"))
     @onpointerdown:stopPropagation="true"
     @ondblclick="@( (x) => OnDbClick(x))"
     style=@("transform:" + GetStyle("translate") + "position:absolute;" + GetStyle("width") + GetStyle("height") + 
                            GetStyle("border")+ GetStyle("background-color") + GetStyle("z-index"))
     >
     <CascadingValue Value="this">
        @if(DragService.Hidden && !Model.Locked)
        {
            <ModificationArea @ref=modificationArea></ModificationArea>
        }
     </CascadingValue>
    <div class="component-hidden-text" hidden=@HiddenControl>
        visiblity : hidden
     </div>

    <div class=@("component-text " + GetClass()) 
    style=@(GetStyle("padding") +GetStyle("word-break") + GetStyle("font-style") + GetStyle("align-items") +
         GetStyle("justify-content") + GetStyle("font-size") + GetStyle("font-family") + GetStyle("color"))>
        @Model.Text
     </div>
     <RadzenTextArea @ref=textArea
        @ondrag:stopPropagation="true"
        @onpointerdown:stopPropagation="true"
        @onpointerup:stopPropagation="true"
        @onkeydown:stopPropagation="true"
        @bind-Value=@Model.Text
        class="w-100 component-text-input"
                    Style=@($"{GetStyle("padding")}{GetStyle("font-size")}") hidden=@HiddenEditMode />
</div>
<style>
    .component{
        box-sizing: border-box;
    }

    
    .component-text{
        top: 0;
        height: 100%; /*inherit는 부모사이즈를 가져오고, 100%는 변경된 부모사이즈를 가져온다. */
        width: 100%;
        position: absolute;
        pointer-events: none;
        overflow: hidden;
        display:flex;
    }
    /* 우측상단에 표시할 텍스트 */
    .component-hidden-text{
        top:0;
        right:0;
        position:absolute;
        pointer-events:none;
        padding:3px;
        font-size:x-small;
        font-style:italic;
        color:lightgray;
    }
    .component-text-input {
        top: 0;
        height: 100%;
        width: 100%;
        position: absolute;
        border-radius: 0px;
    }
    .justify{
        text-align: justify;
        display:block;
    }
    .justify:after{
        content:"";
        display:inline-block;
        width:100%;
    }
</style>
@code {
    public int Height => Model.Height;
    public int Width => Model.Width;
    public bool Selected => Model.Selected;
    private bool isDbClicked = false;
    ModificationArea modificationArea;

    RadzenTextArea textArea;
    [Parameter]
    public ControlBase Base
    {
        set
        {
            this.Model = value.Model;
        }
    }

    public bool HiddenEditMode
    {
        get
        {
            if (this.Model.IsEditMode)
                return false;
            else
                return true;

        }
    }
    public bool HiddenControl
    {
        get
        {
            if (this.Model.Hidden)
                return false;
            else
                return true;

        }
    }

    void OnPointerDown(PointerEventArgs e, string value)
    {
        Console.WriteLine("Control.razor - OnPointerDown");
        if(value == "EditArea")
        {
            return; 
        }

        if (Options.State == DesignerOptionService.ActionState.Resize)
        {
            Console.WriteLine("isDragAble - false");
            StateHasChanged();
        }
        else
        {
            StateHasChanged();
            SelectService.OnPointerDown(e, this.Model, this);
            //modificationArea.UpdateElementSize();

            //이거랑 부모쪽으로 이벤트 가는거랑 뭔 상관이냐?
            //드래그 오브젝트에서는 마우스 이벤트를 막지 않기 때문에 거기서 부모로 이동되는듯 하네.?? 근데 아니네??
            if (this.Model.Locked == false)
            {
                ModificationService.UpdateSize(this.Model.Width, this.Model.Height);

                DragService.StartDrag(Model.Uid, Model.X, Model.Y, Model.Width, Model.Height, e.ClientX, e.ClientY);
                //DragService.Hidden = false;
                Options.State = DesignerOptionService.ActionState.Drag;
            }
            Console.WriteLine("isDragAble = true;");
        }
    }

    public string GetStyle(string type)
    {
        string name = type.ToLower();
        switch (name)
        {
            case "translate":
                return "translate(" + this.Model.X + "px, " + this.Model.Y + "px);";
            case "width":
                return "width:" + (this.Model.Width) + "px;";
            case "height":
                return "height:" + (this.Model.Height) + "px;";
            case "border":
                if(this.Model.IsOverlap == false)
                {
                    if (this.Model.Border.Use)
                    {
                        if(this.Model.Border.UseIndividualBorders)
                            return 
                            $"{name}-top: {this.Model.Border.Thickness}px {this.Model.Border.Style} {this.Model.Border.TopColor};" +
                            $"{name}-right: {this.Model.Border.Thickness}px {this.Model.Border.Style} {this.Model.Border.RightColor};" +
                            $"{name}-bottom: {this.Model.Border.Thickness}px {this.Model.Border.Style} {this.Model.Border.BottomColor};" +
                            $"{name}-left: {this.Model.Border.Thickness}px {this.Model.Border.Style} {this.Model.Border.LeftColor};";
                        else
                            return $"{name}: {this.Model.Border.Thickness}px {this.Model.Border.Style} {this.Model.Border.Color};";
                    }
                    else
                        return $"{name}: {this.Model.Border.Thickness}px {this.Model.Border.Style} transparent;";
                }
                else
                {
                    return $"{name}: {this.Model.Border.Thickness}px {this.Model.Border.Style} red;";
                }
            case "padding":
                return $"{type.ToLower()} : {CSS.DefaultPadding}px; ";
            case "word-break":
                return "word-break:break-all;";
            case "background-color":
                return $"{type.ToLower()} : {this.Model.BackColor}; ";
            case "font-family":
                return $"{type.ToLower()} : {this.Model.Font.FontFamily}; ";
            case "font-size":
                return $"{type.ToLower()} : {this.Model.Font.FontSize}px; ";
            case "font-style":
                return $"{this.Model.Font.FontStyle};";
            case "align-items":
                return $"{type.ToLower()} : {this.Model.Font.VerticlaAlignment}; ";
            case "justify-content":
                return $"{type.ToLower()} : {this.Model.Font.HorizontalAlignment}; ";
            case "color":
                return $"{type.ToLower()} : {this.Model.Font.FontColor}; ";
            case "z-index":
                return $"{type.ToLower()} : {this.Model.ZIndex}; ";
            default:
                return string.Empty;
        }
    }

    string GetClass()
    {
        if (this.Model.Font.HorizontalAlignment == "even")
            return "justify";
        else
            return string.Empty;
    }

    public async Task OnDbClick(MouseEventArgs args)
    {
        Console.WriteLine("OnDoubleClick");
        if (this.Model.Locked is true)
        {
            Console.WriteLine("Locked!!");
            return;
        }

        this.Model.IsEditMode = true;
        Options.State = DesignerOptionService.ActionState.Edit;
        DragService.Hidden = false;
        while (this.textArea == null)
            await Task.Delay(10);

        await this.textArea.Element.FocusAsync();
        await this.textArea.Element.FocusAsync();
        this.StateHasChanged();
    }


}
