@inherits ControlBase
@inject SelectedControlService SelectService
@inject ControlResizeService ResizeService

@inject DragAndDropService DragService
@inject DesignerOptionService Options
@inject DesignerCSSService CSS

     @* @onpointerdown:stopPropagation="true" *@
<div class="component"
     tabindex="@Model.TabIndex"
     @onpointerdown=@(e => OnPointerDown(e, "Control"))
     @ondblclick="@( (x) => OnDbClick(x))"
     style=@("transform:" + GetStyle("translate") + "position:absolute;" + GetStyle("width") + GetStyle("height") + 
                            GetStyle("border")+ GetStyle("background-color") + GetStyle("z-index"))
     >
     <CascadingValue Value="this">
        @* 드래그나 잠겨있거나 텍스트 입력할때 수정영역이 안보이게 하기 위해서 *@
        @if(DragService.Hidden && Model.Locked == false && this.Model.IsEditMode == false)
        {
            <ResizeArea @ref=ResizeArea></ResizeArea>
        }
     </CascadingValue>
    <div class="overlay-text" hidden=@HiddenControl>
        visiblity : hidden
     </div>

     <div class="component-text" style=@(OuterTextStyle)>
        <div class="component-text-inner" style=@(InnerTextStyle)>
            @Model.Text
         </div>
     </div>
     <RadzenTextArea @ref=textArea
        @ondrag:stopPropagation="true"
        @onpointerdown:stopPropagation="true"
        @onpointerup:stopPropagation="true"
        @onkeydown:stopPropagation="true"
        @onkeyup=OnEditorKeyUp
        @bind-Value=@Model.Text
        class="w-100 component-text-input"
                    Style=@InputTextStyle hidden=@HiddenEditMode  />
</div>
<style>
    .component{

        box-sizing: border-box; /* 테두리가 컨트롤 내부로 생성되도록 한다.  */
        outline:none; /* 포커스가 갔을때 기본 Outline 이 생성되는걸 막기위해서. 물론 이코드는 포커스일때만 아니라 그냥 다 막는다.  */
        line-height:1;
    }


    .component-text{
        display:flex;
        top: 0;
        height: 100%; /*inherit는 부모사이즈를 가져오고, 100%는 변경된 부모사이즈를 가져온다. */
        width: 100%;
        position: absolute;
        pointer-events: none;
    }
    .component-text-inner{      
        overflow: hidden;
        display:block;
    }
    /* 우측상단에 표시할 텍스트 */
    .overlay-text{
        top:0;
        right:0;
        position:absolute;
        pointer-events:none;
        padding:3px;
        font-size:x-small;
        font-style:italic;
        color:lightgray;
    }
    .component-text-input {
        top: 0;
        height: 100%;
        width: 100%;
        position: absolute;
        border-radius: 0px;
    }
</style>
@code {

    public string OuterTextStyle
    {
        get
        {
            string style =
                GetStyle("align-items") + 
                GetStyle("justify-content");
            return style;
        }
    }
    public string InnerTextStyle
    {
        get
        {
            string style = GetStyle("padding") + //장평조절 기능때문에 여기서 사용
                           GetStyle("text-align") +
                           GetStyle("word-break") +
                           GetStyle("font-style") +
                           GetStyle("font-size") +
                           GetStyle("font-family") +
                           GetStyle("color") +
                           GetStyle("white-space")
                           ;
            return style;
        }
    }

    public string InputTextStyle
    {
        get
        {
            string style = GetStyle("padding") +
                           GetStyle("font-size") +
                           GetStyle("font-style") +
                           GetStyle("font-family") +
                           //포커스일때 기본컨트롤 스타일 삭제
                           "border:0px;"  +          
                           "box-shadow:none;" + 
                           //리사이즈 컨트롤 삭제
                           "resize:none;";      
            return style;
        }
    }

    public int Height => Model.Height;
    public int Width => Model.Width;
    private bool isDbClicked = false;
    ResizeArea ResizeArea;

    RadzenTextArea textArea;
    [Parameter]
    public ControlBase Base
    {
        set
        {
            this.Model = value.Model;
        }
    }

    public bool HiddenEditMode
    {
        get
        {
            if (this.Model.IsEditMode)
                return false;
            else
                return true;

        }
    }
    public bool HiddenControl
    {
        get
        {
            if (this.Model.Hidden)
                return false;
            else
                return true;

        }
    }

    void OnPointerDown(PointerEventArgs e, string value)
    {
        if (Options.EventObject != null)
            return;                  
        Options.EventObject = this;

        Logger.Instance.Write("");
        if(value == "EditArea")
        {
            return; 
        }

        if (Options.State == DesignerOptionService.ActionState.Resize)
        {
            Logger.Instance.Write("isDragAble - false");
            StateHasChanged();
        }
        else
        {
            StateHasChanged();
            SelectService.OnPointerDown(e, this.Model, this);
            //ResizeArea.UpdateElementSize();

            //이거랑 부모쪽으로 이벤트 가는거랑 뭔 상관이냐?
            //드래그 오브젝트에서는 마우스 이벤트를 막지 않기 때문에 거기서 부모로 이동되는듯 하네.?? 근데 아니네??
            if (this.Model.Locked == false)
            {
                ResizeService.UpdateSize(this.Model.Width, this.Model.Height);

                DragService.StartDrag(Model.Uid, Model.X, Model.Y, Model.Width, Model.Height, e.ClientX, e.ClientY);
                //DragService.Hidden = false;
                Options.State = DesignerOptionService.ActionState.Drag;
            }
            Logger.Instance.Write("isDragAble = true;");
        }
    }

    public string GetStyle(string type)
    {
        var style= CSS.GetModelStyle(type, this.Model);
        return style;
    }


    public async Task OnDbClick(MouseEventArgs args)
    {
        Logger.Instance.Write("OnDoubleClick");
        if (this.Model.Locked is true)
        {
            Logger.Instance.Write("Locked!!");
            return;
        }

        this.Model.IsEditMode = true;
        Options.State = DesignerOptionService.ActionState.Edit;
        DragService.End();

        while (this.textArea == null)
            await Task.Delay(10);

        await this.textArea.Element.FocusAsync();
        await this.textArea.Element.FocusAsync();
        this.StateHasChanged();
    }

    private void OnEditorKeyUp(KeyboardEventArgs e)
    {
        if(e.Key.Contains("Escape"))
        {
            Logger.Instance.Write("Editor - Escape");
            
        this.Model.IsEditMode = false;
        Options.State = DesignerOptionService.ActionState.None;
            this.StateHasChanged();            

        }
    }
    //todo : 컨트롤 사이즈를 변경할때 밴드 영역을 벗어나서 이벤트 끊어질때 먹통됨.
}
