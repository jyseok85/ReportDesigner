@inject DesignerOptionService Options

<div 
    @ondrag:preventDefault="true"
    @ondrag:stopPropagation="true"
    @ondragend:preventDefault="true"
    @ondragend:stopPropagation="true"
    @ondragenter:preventDefault="true"
    @ondragenter:stopPropagation="true"
    @ondragleave:preventDefault="true"
    @ondragleave:stopPropagation="true"
    @ondragover:preventDefault="true"
    @ondragover:stopPropagation="true"
    @ondragstart:preventDefault="true"
    @ondragstart:stopPropagation="true"
@onpointerdown:preventDefault="true"
     class="drag-object"
     style=@("width:" + DragService.Width + "px;height:" + DragService.Height + "px;" +
     "transform:translate(" + (DragService.PosX) + "px, " + (DragService.PosY) + "px);") hidden=@DragService.Hidden>
    
    @if(Options.Debugging)
    {
        <div style="font-size:xx-small;">debug:drag-object</div>
    }
</div>
<style>
    .drag-object {
        position: absolute;
        border: 1px dotted grey;
    }
</style>
@code {
    //서비스를 Inject해서 사용하지 않고, 파라메터로 사용하는 이유는 UI 갱신이 때문이다.
    //Blazor에서 사용하는 태그는 데이터가 변경된다고 UI가 갱신되지 않고,
    //Blazor의 속성이나 렌더를 수동으로 변경해야 발생한다.
    [Parameter]
    public DragAndDropService DragService { get; set; } = new DragAndDropService();
    void OnPointerDown(PointerEventArgs e)
    {
        if (Options.EventObject != null)
            return;
        Options.EventObject = this;

        Logger.Instance.Write("");
        DragService.UpdatePos(e.ClientX, e.ClientY);
    }
}
