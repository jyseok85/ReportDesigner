@inject DesignerOptionService Options
@inject ResizingService ResizeService
@inject GridResizingService Resizer

@* stopPropagation: 상위 Element로 이벤트전달을 막는다. *@
@* 모든 드래그 이벤트를 막은 이유는 순간적으로 드래그시 상위 Element로 이벤트가 이동되어서 잘못된 현상이 발생하기 때문이다.*@
<div class="resize-area"
@ondrag:preventDefault="true"
@ondrag:stopPropagation="true"
@ondragend:preventDefault="true"
@ondragend:stopPropagation="true"
@ondragenter:preventDefault="true"
@ondragenter:stopPropagation="true"
@ondragleave:preventDefault="true"
@ondragleave:stopPropagation="true"
@ondragover:preventDefault="true"
@ondragover:stopPropagation="true"
@ondragstart:preventDefault="true"
@ondragstart:stopPropagation="true"
@onpointerdown:preventDefault="true"
@onpointermove:preventDefault="true"

     style=@GetAreaStyle() hidden=@Hidden>

     <div class="point-spot">
        <div class="ui-resize-handle ui-resizable-w" @onpointerdown='e=>OnResizePointerDown(e,"w")' />
        <div class="ui-resize-handle ui-resizable-e" @onpointerdown='e=>OnResizePointerDown(e,"e")' />
        <div class="ui-resize-handle ui-resizable-s" @onpointerdown='e=>OnResizePointerDown(e,"s")' />
        <div class="ui-resize-handle ui-resizable-n" @onpointerdown='e=>OnResizePointerDown(e,"n")' />
        <div class="ui-resize-handle ui-resizable-se" @onpointerdown='e=>OnResizePointerDown(e,"se")' />
        <div class="ui-resize-handle ui-resizable-sw" @onpointerdown='e=>OnResizePointerDown(e,"sw")' />
        <div class="ui-resize-handle ui-resizable-ne" @onpointerdown='e=>OnResizePointerDown(e,"ne")' />
        <div class="ui-resize-handle ui-resizable-nw" @onpointerdown='e=>OnResizePointerDown(e,"nw")' />
    </div>

    @if (IsGridResizerVisible())
    {
        <div class="cell-resizer">
        @for (int index = 0; index <= parent.Model.TableInfo.ColCount; index++)
        {
            int pos = parent.Model.TableInfo.ColPositions[index];

            //별도의 변수를 선언하고 할당해서 사용해야 한다. 그렇지 않으면 항상 맥스 Index 값이 들어오게 된다. 
            int line = index;
            <div style=@GetCellSplitterStyle(line,pos,0, GridResizingService.Type.Col)>
                <div style="transform:translateX(-2px);width:5px;height:100%;"
                @onpointerdown='e=>OnCellResizerPointerDown(e,line, GridResizingService.Type.Col)'/>
            </div>
        }

        @for (int index = 0; index <= parent.Model.TableInfo.RowCount; index++)
        {
            int pos = parent.Model.TableInfo.RowPositions[index];
            int line = index;
            
            @* 라인은 1픽셀로 보이지만, 드래그 영역은 5px로 맞춰준다. *@
            <div style=@GetCellSplitterStyle(line, 0, pos, GridResizingService.Type.Row)>
                <div style="transform:translateY(-2px);height:5px;width:100%;"
                @onpointerdown='e=>OnCellResizerPointerDown(e,line, GridResizingService.Type.Row)'/>
            </div >
        }
        </div>
    }
</div>


@code {
    [CascadingParameter]
    public ControlBase parent { get; set; }

    [Parameter]
    public bool Hidden { get; set; } = false;

    void OnResizePointerDown(PointerEventArgs e, string type)
    {
        Logger.Instance.Write($"ResizeArea - OnResizePointerDown : {type}");
        ResizeService.UpdateSize(parent.Model.Width, parent.Model.Height);
        ResizeService.ActionStart(e, type, parent.Model.Uid);
        Options.State = DesignerOptionService.ActionState.Resize;
    }

    private void OnCellResizerPointerDown(PointerEventArgs e, int index, GridResizingService.Type type)
    {
        if(Options.State == DesignerOptionService.ActionState.None)
        {
            if(Is테이블외각테두리(index,type) == true)
            {
                Options.State = DesignerOptionService.ActionState.Drag;
                //버브링된 table OnPointerDown 이 호출될줄 알았는데 Options.EventStartObject 로 막아놨다. 
                //그러므로  Options.EventStartObject 를 비워줘서 테이블의 이벤트가 타도록 한다. 
                Options.EventStartObject = null;
                Logger.Instance.Write("call bubbled event to Table");

            }
            else
            {
                Options.State = DesignerOptionService.ActionState.GridResize;
                Resizer.Model = parent.Model;
                Resizer.StartAction(e, index, type);
            }
        }
        //todo : 테이블의 스냅라인이 이상함.
    }


    private string GetAreaStyle()
    {
        string transform = "transform:translate(" + (ResizeService.X - parent.Model.Border.Left) + "px, " + (ResizeService.Y- parent.Model.Border.Top) + "px);";

        string width = $"width:{ResizeService.Width}px;";

        string height = $"height:{ResizeService.Height}px;";

        return transform + width + height + GetStyle("border") + GetStyle("display");

        string GetStyle(string type)
        {
            string style = string.Empty;
            switch(type.ToLower())
            {
                case "border":
                    if (this.parent.Model.IsOverlap == false)
                    {
                        style = $"{type.ToLower()}:1px solid #337ab7;";
                    }
                    else
                    {
                        style =  $"{type.ToLower()}:1px solid red;";
                    }
                    break;
                case "display":
                    if (IsGridResizerVisible())
                        style = $"{type.ToLower()}:contents;";
                    break;
            }
            return style;
        }     
    } 
    private bool IsGridResizerVisible()
    {
        //complete : 조건에 따라 display contents or block 전환하기
        //1. 테이블
        //2. 사이즈가 수정중이 아닌경우
        if (parent.Model.Type == ReportComponentModel.Control.Table && ResizeService.IsChanged == false)
            return true;
        else
            return false;
    }

    private bool Is테이블외각테두리(int index , GridResizingService.Type type)
    {
        bool result = false;
        if (index == 0)
            result = true;
        if (type == GridResizingService.Type.Row)
        {
            if (parent.Model.TableInfo.RowCount == index)
                result = true;
        }
        else
        {
            if (parent.Model.TableInfo.ColCount == index)
                result = true;
        }

        return result;
    }

    private string GetCellSplitterStyle(int index, int xPos , int yPos, GridResizingService.Type type)
    {  
        string size = "100%";
        string cursor = "";
        string backgroundColor = "#969696;";
        //string backgroundColor = "#337ab7;";
        //backgroundColor = "white";
        //string outlineColor = "#969696";
        string outlineColor = "#337ab7";
        int thickness = 1;

        if (type == GridResizingService.Type.Row)
        {
            if (Resizer.IsChanged == true && Resizer.Index == index)            
                yPos = Resizer.Y;

            xPos = 0;
            if (Resizer.IsChanged)
            {
                if (Resizer.SelectLine == GridResizingService.Type.Row)
                {
                    xPos = -(parent.Model.AbsoluteOffsetX);
                    size = Options.PaperSize.Width + "px";
                }
                else
                    return "display:none;";
            }
        }
        else if(type == GridResizingService.Type.Col)
        {
            if (Resizer.IsChanged == true && Resizer.Index == index)            
                xPos = Resizer.X;

            yPos = 0;
            if (Resizer.IsChanged)
            {
                if(Resizer.SelectLine ==  GridResizingService.Type.Col)
                {
                    yPos = -(parent.Model.AbsoluteOffsetY);
                    size = Options.PaperSize.Height + "px";
                }
                else
                    return "display:none;";      
            }
        }
        if (Resizer.IsChanged && Resizer.Index != index)
        {
            return "display:none;";
        }


        if(Is테이블외각테두리(index, type))
        {
            backgroundColor = outlineColor;     
            thickness = 2;
            cursor = "cursor:move;";
        }

        if (type == GridResizingService.Type.Row)
        {
            size = $"width:{size};height:{thickness}px;";
            if(cursor == string.Empty)
                cursor = "cursor:row-resize;";
        }
        else
        {
            size = $"height:{size};width:{thickness}px;";
            if(cursor == string.Empty)
                cursor = "cursor:col-resize;";
        }


        string transform = $"transform:translate({xPos}px,{yPos}px);";
        string style = transform + size + cursor + 
                    $"background-color:{backgroundColor};" + 
                    "position:absolute;";
        return style;
    }



    //     public void UpdateElementSize()
    // {
    //     ResizeService.Width = parent.Model.Width;
    //     ResizeService.Height = parent.Model.Height;
    //     StateHasChanged();
    // }
}
