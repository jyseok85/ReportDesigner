@inherits PropertyBase
@inject DesignerCSSService CSS
@inject DesignerOptionService Options
@inject SelectedControlService SelectedControlService


<RadzenPanelMenuItem Text="Font">
    <div class="side-panel-contents-background">
        <RadzenStack class="property-stack" Orientation="@CSS.Orientation" Gap="@CSS.Gap" Reverse="@CSS.Reverse" JustifyContent="@CSS.JustifyContent" Wrap="@CSS.Wrap">
            <RadzenText class="property-displayName">Font Name</RadzenText>
            <RadzenDropDown class="property-item property-dropdown" AllowClear="false" AllowFiltering="false" @bind-Value=@FontName Data=@fontList ValueProperty="Name" PopupStyle=@CSS.DropDownPopupStyle>
                <Template>
                    @(context.Name)
                </Template>
            </RadzenDropDown>
        </RadzenStack>
        <RadzenStack class="property-stack" Orientation="@CSS.Orientation" Gap="@CSS.Gap" Reverse="@CSS.Reverse" JustifyContent="JustifyContent.Start" Wrap="@CSS.Wrap">
            <RadzenText class="property-displayName">Font Color</RadzenText>
            <RadzenColorPicker class="color-picker w-100" @bind-Value=@FontColor ShowHSV=@CSS.ShowHSV ShowRGBA=@CSS.ShowRGBA ShowColors=@CSS.ShowColors ShowButton=@CSS.ShowButton />
        </RadzenStack>
        <RadzenStack class="property-stack" Orientation="@CSS.Orientation" Gap="@CSS.Gap" Reverse="@CSS.Reverse" JustifyContent="@CSS.JustifyContent" Wrap="@CSS.Wrap">
            <RadzenText class="property-displayName">Font Size</RadzenText>
            <RadzenNumeric class="property-item" Min="6" Max="72" TValue="int" Value=@fontSize Change=@(x=>OnChangedFontSize(x)) />
        </RadzenStack>
        <RadzenStack class="property-stack" Orientation="@CSS.Orientation" Gap="@CSS.Gap" Reverse="@CSS.Reverse" JustifyContent="JustifyContent.Start" Wrap="@CSS.Wrap">
            <RadzenText class="property-displayName">Font Style</RadzenText>
            <RadzenSelectBar @bind-Value=@fontStyle TValue="IEnumerable<int>" class="d-flex selectbar-icon-only" Size="ButtonSize.ExtraSmall" Multiple="true" Change="(x) => ChangeStyle(x)">
                <Items>
                    <RadzenSelectBarItem Icon="format_bold" Value="0" Style="padding:0.2rem;" />
                    <RadzenSelectBarItem Icon="format_italic" Value="1" Style="padding:0.2rem;" />
                    <RadzenSelectBarItem Icon="format_underlined" Value="2" Style="padding:0.2rem;" />
                    <RadzenSelectBarItem Icon="format_strikethrough" Value="3" Style="padding:0.2rem;" />
                </Items>
            </RadzenSelectBar>
        </RadzenStack>
        <RadzenStack class="property-stack" Orientation="@CSS.Orientation" Gap="@CSS.Gap" Reverse="@CSS.Reverse" JustifyContent="JustifyContent.Start" Wrap="@CSS.Wrap">
            <RadzenText class="property-displayName">Text Alignment</RadzenText>
            <RadzenStack class="property-stack-2nd" Orientation="@CSS.Orientation" Gap="@CSS.Gap" Reverse="@CSS.Reverse" JustifyContent="JustifyContent.Start" Wrap="@CSS.Wrap">
                <RadzenText class="property-displayName-2nd">Vertical </RadzenText>
                <RadzenSelectBar @bind-Value=@textAlignVertical TValue="int" class="d-flex selectbar-icon-only" Size="ButtonSize.ExtraSmall" Change="(x) => ChangeVerticalAlignment(x)">
                    <Items>
                        <RadzenSelectBarItem Icon="vertical_align_top" Value="0" Style="padding:0.2rem;" />
                        <RadzenSelectBarItem Icon="vertical_align_center" Value="1" Style="padding:0.2rem;" Disabled=@fixVerticalAlign />
                        <RadzenSelectBarItem Icon="vertical_align_bottom" Value="2" Style="padding:0.2rem;" Disabled=@fixVerticalAlign />
                    </Items>
                </RadzenSelectBar>
            </RadzenStack>
        </RadzenStack>
        <RadzenStack class="property-stack" Orientation="@CSS.Orientation" Gap="@CSS.Gap" Reverse="@CSS.Reverse" JustifyContent="JustifyContent.Start" Wrap="@CSS.Wrap">
            <RadzenText class="property-displayName"></RadzenText>
            <RadzenStack class="property-stack-2nd" Orientation="@CSS.Orientation" Gap="@CSS.Gap" Reverse="@CSS.Reverse" JustifyContent="JustifyContent.Start" Wrap="@CSS.Wrap">
                <RadzenText class="property-displayName-2nd">Horizontal </RadzenText>
                <RadzenSelectBar @bind-Value=@textAlignHorizontal TValue="int" class="d-flex selectbar-icon-only" Size="ButtonSize.ExtraSmall" Change="(x) => ChangeHorizontalAlignment(x)">
                    <Items>
                        <RadzenSelectBarItem Icon="format_align_left" Value="3" Style="padding:0.2rem;" />
                        <RadzenSelectBarItem Icon="format_align_center" Value="4" Style="padding:0.2rem;" />
                        <RadzenSelectBarItem Icon="format_align_right" Value="5" Style="padding:0.2rem;" />
                        <RadzenSelectBarItem Icon="format_align_justify" Value="6" Style="padding:0.2rem;" />

                    </Items>
                </RadzenSelectBar>
            </RadzenStack>
        </RadzenStack>

    </div>
</RadzenPanelMenuItem>
@code {
    bool fixVerticalAlign = false;
    private string FontName
    {
        get
        {
            if (SelectedControlService is not null && SelectedControlService.CurrentSelectedModel is not null)
                return SelectedControlService.CurrentSelectedModel.Font.FontFamily;
            else
                return string.Empty;
        }
        set
        {
            SelectedControlService.CurrentSelectedModel.Font.FontFamily = value;
            Options.RefreshBody();

        }
    }

    private int fontSize = 12;
    string fontColor = "rgb(0, 0, 0)";     //블랙
    int textAlignVertical = 1;
    int textAlignHorizontal = 3;
    List<FontModel> fontList = new List<FontModel>();
    IEnumerable<int> fontStyle = new int[] { };
    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        //96dpi 기준일때의 값
        if (fontList.Count == 0)
        {
            AddFont();
        }
    }
    public string FontColor
    {
        get
        {
            if (SelectedControlService is not null && SelectedControlService.CurrentSelectedModel is not null)
                return SelectedControlService.CurrentSelectedModel.Font.FontColor;
            else
                return "Black";
        }
        set
        {
            SelectedControlService.CurrentSelectedModel.Font.FontColor = value;
            Options.RefreshBody();
        }
    }
    void OnColorChange(string value, string target)
    {
        switch (target.ToLower())
        {
            case "font": fontColor = value; break;
        }
    }

    private void OnChangedFontSize(int x)
    {
        fontSize = SelectedControlService.CurrentSelectedModel.Font.FontSize = x;
        Options.RefreshBody();
    }

    private void ChangeStyle(IEnumerable<int> x)
    {
        /// font-style : italic
        /// font-weight: bold;
        /// text-decoration : underline
        /// text-decoration : line-through

        string style = string.Empty;
        if(fontStyle.Contains(0))
            style += "font-weight: bold;";
        if(fontStyle.Contains(1))
            style += "font-style : italic;";

        if (fontStyle.Count() > 0 && fontStyle.Last() == 2)
        {
            style += "text-decoration : underline;";
            if (fontStyle.Contains(3))
            {
                int[] underline = new int[] { 3 };
                fontStyle = fontStyle.Except(underline);
            }
        }
        if (fontStyle.Count() > 0 && fontStyle.Last() == 3)
        {
            style += "text-decoration : line-through;";
            if (fontStyle.Contains(2))
            {
                int[] lineThrough = new int[] { 2 };
                fontStyle = fontStyle.Except(lineThrough);
            }
        }

        SelectedControlService.CurrentSelectedModel.Font.FontStyle = style;
        Options.RefreshBody();
    }

    private void ChangeVerticalAlignment(int x)
    {
        string str = string.Empty;
        if (x == 0)
            str = "start";
        else if (x == 1)
            str = "center";
        else if (x == 2)
            str = "end";

        SelectedControlService.CurrentSelectedModel.Font.VerticlaAlignment = str;
        Options.RefreshBody();
    }
    private void ChangeHorizontalAlignment(int x)
    {
        string str = string.Empty;
        fixVerticalAlign = false;
        if (x == 3)
            str = "start";
        else if (x == 4)
            str = "center";
        else if (x == 5)
            str = "end";
        else if (x == 6)
        {
            str = "even";
            SelectedControlService.CurrentSelectedModel.Font.VerticlaAlignment = "start";
            textAlignVertical = 0;
            fixVerticalAlign = true;
        }
        SelectedControlService.CurrentSelectedModel.Font.HorizontalAlignment = str;
        Options.RefreshBody();
    }
    private void AddFont()
    {
        fontList.Add(new FontModel("Noto Sans"));
        fontList.Add(new FontModel("Nanum Gothic"));
        fontList.Add(new FontModel("Nanum Myeongjo"));
        fontList.Add(new FontModel("Nanum Gothic Coding"));
        fontList.Add(new FontModel("Nanum Brush Script"));
        fontList.Add(new FontModel("Nanum Pen Script"));
        fontList.Add(new FontModel("Arial"));
        fontList.Add(new FontModel("Verdana"));
        fontList.Add(new FontModel("Tahoma"));
        fontList.Add(new FontModel("Trebuchet MS"));
        fontList.Add(new FontModel("Times New Roman"));
        fontList.Add(new FontModel("Georgia"));
        fontList.Add(new FontModel("Garamond"));
        fontList.Add(new FontModel("Courier New"));
        fontList.Add(new FontModel("Brush Script MT"));
    }

    public void RefreshState()
    {
        this.UpdateFontSize();
        this.UpdateFontStyle();
        this.UpdateAlignment();
        this.StateHasChanged();
    }
    private void UpdateFontSize()
    {
        fontSize = SelectedControlService.CurrentSelectedModel.Font.FontSize;
    }
    private void UpdateFontStyle()
    {
        List<int> nums = new List<int>();
        if (SelectedControlService.CurrentSelectedModel.Font.FontStyle.Contains("bold"))
            nums.Add(0);
        if (SelectedControlService.CurrentSelectedModel.Font.FontStyle.Contains("italic"))
            nums.Add(1);
        if (SelectedControlService.CurrentSelectedModel.Font.FontStyle.Contains("underline"))
            nums.Add(2);
        if (SelectedControlService.CurrentSelectedModel.Font.FontStyle.Contains("line-through"))
            nums.Add(3);

        fontStyle = nums.ToArray();
    }
    private void UpdateAlignment()
    {
        string verticalAlign = SelectedControlService.CurrentSelectedModel.Font.VerticlaAlignment;
        string horizontalAlign = SelectedControlService.CurrentSelectedModel.Font.HorizontalAlignment;
        switch (verticalAlign)
        {
            case "start":
                textAlignVertical = 0; break;
            case "center":
                textAlignVertical = 1; break;
            case "end":
                textAlignVertical = 2; break;
        }
        switch (horizontalAlign)
        {
            case "start":
                textAlignHorizontal = 3; break;
            case "center":
                textAlignHorizontal = 4; break;
            case "end":
                textAlignHorizontal = 5; break;
            case "even":
                textAlignHorizontal = 6;
                SelectedControlService.CurrentSelectedModel.Font.VerticlaAlignment = "start";
                fixVerticalAlign = true;
                textAlignVertical = 0;
                break;
        }
    }
}
