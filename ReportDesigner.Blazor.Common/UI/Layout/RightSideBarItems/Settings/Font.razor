@inherits PropertyBase
@inject DesignerCSSService CSS
@inject DesignerOptionService Options
@inject SelectedControlService SelectedControlService


<RadzenPanelMenuItem Text="Font">
    <div class="side-panel-contents-background">
        <RadzenStack class="property-stack" Orientation="@CSS.Orientation" Gap="@CSS.Gap" Reverse="@CSS.Reverse" JustifyContent="@CSS.JustifyContent" Wrap="@CSS.Wrap">
            <RadzenText class="property-displayName">Font Name</RadzenText>
            <RadzenDropDown class="property-item property-dropdown" AllowClear="false" AllowFiltering="false" @bind-Value=@FontName Data=@fontList ValueProperty="Name" PopupStyle=@CSS.DropDownPopupStyle>
                <Template>
                    @(context.Name)
                </Template>
            </RadzenDropDown>
        </RadzenStack>
        <RadzenStack class="property-stack" Orientation="@CSS.Orientation" Gap="@CSS.Gap" Reverse="@CSS.Reverse" JustifyContent="JustifyContent.Start" Wrap="@CSS.Wrap">
            <RadzenText class="property-displayName">Font Color</RadzenText>
            <RadzenColorPicker class="color-picker w-100" @bind-Value=@FontColor ShowHSV=@CSS.ShowHSV ShowRGBA=@CSS.ShowRGBA ShowColors=@CSS.ShowColors ShowButton=@CSS.ShowButton />
        </RadzenStack>
        <RadzenStack class="property-stack" Orientation="@CSS.Orientation" Gap="@CSS.Gap" Reverse="@CSS.Reverse" JustifyContent="@CSS.JustifyContent" Wrap="@CSS.Wrap">
            <RadzenText class="property-displayName">Font Size</RadzenText>
            <RadzenNumeric class="property-item" Min="6" Max="72" TValue="int" @bind-Value=@FontSize/>
        </RadzenStack>
        <RadzenStack class="property-stack" Orientation="@CSS.Orientation" Gap="@CSS.Gap" Reverse="@CSS.Reverse" JustifyContent="JustifyContent.Start" Wrap="@CSS.Wrap">
            <RadzenText class="property-displayName">Font Style</RadzenText>
            <RadzenSelectBar @bind-Value=@FontStyle TValue="IEnumerable<int>" class="d-flex selectbar-icon-only" Size="ButtonSize.ExtraSmall" Multiple="true">
                <Items>
                    <RadzenSelectBarItem Icon="format_bold" Value="0" Style="padding:0.2rem;" />
                    <RadzenSelectBarItem Icon="format_italic" Value="1" Style="padding:0.2rem;" />
                    <RadzenSelectBarItem Icon="format_underlined" Value="2" Style="padding:0.2rem;" />
                    <RadzenSelectBarItem Icon="format_strikethrough" Value="3" Style="padding:0.2rem;" />
                </Items>
            </RadzenSelectBar>
        </RadzenStack>
        <RadzenStack class="property-stack" Orientation="@CSS.Orientation" Gap="@CSS.Gap" Reverse="@CSS.Reverse" JustifyContent="JustifyContent.Start" Wrap="@CSS.Wrap">
            <RadzenText class="property-displayName">Text Alignment</RadzenText>
            <RadzenStack class="property-stack-2nd" Orientation="@CSS.Orientation" Gap="@CSS.Gap" Reverse="@CSS.Reverse" JustifyContent="JustifyContent.Start" Wrap="@CSS.Wrap">
                <RadzenText class="property-displayName-2nd">Vertical </RadzenText>
                <RadzenSelectBar @bind-Value=@TextAlignVertical TValue="int" class="d-flex selectbar-icon-only" Size="ButtonSize.ExtraSmall">
                    <Items>
                        <RadzenSelectBarItem Icon="vertical_align_top" Value="0" Style="padding:0.2rem;" />
                        <RadzenSelectBarItem Icon="vertical_align_center" Value="1" Style="padding:0.2rem;" Disabled=@fixVerticalAlign />
                        <RadzenSelectBarItem Icon="vertical_align_bottom" Value="2" Style="padding:0.2rem;" Disabled=@fixVerticalAlign />
                    </Items>
                </RadzenSelectBar>
            </RadzenStack>
        </RadzenStack>
        <RadzenStack class="property-stack" Orientation="@CSS.Orientation" Gap="@CSS.Gap" Reverse="@CSS.Reverse" JustifyContent="JustifyContent.Start" Wrap="@CSS.Wrap">
            <RadzenText class="property-displayName"></RadzenText>
            <RadzenStack class="property-stack-2nd" Orientation="@CSS.Orientation" Gap="@CSS.Gap" Reverse="@CSS.Reverse" JustifyContent="JustifyContent.Start" Wrap="@CSS.Wrap">
                <RadzenText class="property-displayName-2nd">Horizontal </RadzenText>
                <RadzenSelectBar @bind-Value=@TextAlignHorizontal TValue="int" class="d-flex selectbar-icon-only" Size="ButtonSize.ExtraSmall">
                    <Items>
                        <RadzenSelectBarItem Icon="format_align_left" Value="3" Style="padding:0.2rem;" />
                        <RadzenSelectBarItem Icon="format_align_center" Value="4" Style="padding:0.2rem;" />
                        <RadzenSelectBarItem Icon="format_align_right" Value="5" Style="padding:0.2rem;" />
                        <RadzenSelectBarItem Icon="format_align_justify" Value="6" Style="padding:0.2rem;" />

                    </Items>
                </RadzenSelectBar>
            </RadzenStack>
        </RadzenStack>

    </div>
</RadzenPanelMenuItem>
@code {
    bool fixVerticalAlign = false;
    List<FontModel> fontList = new List<FontModel>();

    private string FontName
    {
        get
        {
            if (SelectedControlService is not null && SelectedControlService.CurrentSelectedModel is not null)
                return SelectedControlService.CurrentSelectedModel.Font.FontFamily;
            else
                return string.Empty;
        }
        set
        {
            SelectedControlService.CurrentSelectedModel.Font.FontFamily = value;
            Options.RefreshBody();

        }
    }
    private string FontColor
    {
        get
        {
            if (SelectedControlService is not null && SelectedControlService.CurrentSelectedModel is not null)
                return SelectedControlService.CurrentSelectedModel.Font.FontColor;
            else
                return "Black";
        }
        set
        {
            SelectedControlService.CurrentSelectedModel.Font.FontColor = value;
            Options.RefreshBody();
        }
    }
    private int FontSize
    {
        get
        {
            if (SelectedControlService is not null && SelectedControlService.CurrentSelectedModel is not null)
                return SelectedControlService.CurrentSelectedModel.Font.FontSize;
            else
                return 14;
        }
        set
        {
            SelectedControlService.CurrentSelectedModel.Font.FontSize = value;
            Options.RefreshBody();
        }
    }
    private int TextAlignHorizontal
    {
        get { 
            int textAlignHorizontal = 3;
            if (SelectedControlService is null || SelectedControlService.CurrentSelectedModel is null)
                return textAlignHorizontal;

            string horizontalAlign = SelectedControlService.CurrentSelectedModel.Font.HorizontalAlignment;
            switch (horizontalAlign)
            {
                case "start":
                    textAlignHorizontal = 3; break;
                case "center":
                    textAlignHorizontal = 4; break;
                case "end":
                    textAlignHorizontal = 5; break;
                case "even":
                    textAlignHorizontal = 6;
                    SelectedControlService.CurrentSelectedModel.Font.VerticlaAlignment = "start";
                    fixVerticalAlign = true;
                    TextAlignVertical = 0;
                    break;
            }
            return textAlignHorizontal; 
        }
        set
        {
            string str = string.Empty;
            fixVerticalAlign = false;
            if (value == 3)
                str = "start";
            else if (value == 4)
                str = "center";
            else if (value == 5)
                str = "end";
            else if (value == 6)
            {
                str = "even";
                SelectedControlService.CurrentSelectedModel.Font.VerticlaAlignment = "start";
                fixVerticalAlign = true;
                TextAlignVertical = 0;
            }
            SelectedControlService.CurrentSelectedModel.Font.HorizontalAlignment = str;
            Options.RefreshBody();
        }
    }
    private int TextAlignVertical
    {
        get
        {
            int textAlignVertical = 1;
            if (SelectedControlService is null || SelectedControlService.CurrentSelectedModel is null)
                return textAlignVertical;

            string verticalAlign = SelectedControlService.CurrentSelectedModel.Font.VerticlaAlignment;
            switch (verticalAlign)
            {
                case "start":
                    textAlignVertical = 0; break;
                case "center":
                    textAlignVertical = 1; break;
                case "end":
                    textAlignVertical = 2; break;
            }
            return textAlignVertical;
        }
        set
        {
            string str = string.Empty;
            switch(value)
            {
                case 0: str = "start";break;
                case 1: str = "center";break;
                case 2: str = "end"; break;
            }
            SelectedControlService.CurrentSelectedModel.Font.VerticlaAlignment = str;
            Options.RefreshBody();
        }
    }
    private IEnumerable<int> FontStyle
    {
        get
        {
            List<int> nums = new List<int>();
            if (SelectedControlService is null || SelectedControlService.CurrentSelectedModel is null)
                return nums.ToArray();

            if (SelectedControlService.CurrentSelectedModel.Font.FontStyle.Contains("bold"))
                nums.Add(0);
            if (SelectedControlService.CurrentSelectedModel.Font.FontStyle.Contains("italic"))
                nums.Add(1);
            if (SelectedControlService.CurrentSelectedModel.Font.FontStyle.Contains("underline"))
                nums.Add(2);
            if (SelectedControlService.CurrentSelectedModel.Font.FontStyle.Contains("line-through"))
                nums.Add(3);

            return nums.ToArray();
        }
        set
        {
            /// font-style : italic
            /// font-weight: bold;
            /// text-decoration : underline
            /// text-decoration : line-through
            IEnumerable<int> nums = value;            

            string style = string.Empty;
            if (nums.Contains(0))
                style += "font-weight: bold;";
            if (nums.Contains(1))
                style += "font-style : italic;";

            if (nums.Count() > 0 && nums.Last() == 2)
            {
                style += "text-decoration : underline;";
                if (nums.Contains(3))
                {
                    int[] underline = new int[] { 3 };
                    nums = nums.Except(underline);
                }
            }
            if (nums.Count() > 0 && nums.Last() == 3)
            {
                style += "text-decoration : line-through;";
                if (nums.Contains(2))
                {
                    int[] lineThrough = new int[] { 2 };
                    nums = nums.Except(lineThrough);
                }
            }

            SelectedControlService.CurrentSelectedModel.Font.FontStyle = style;
            Options.RefreshBody();
        }
    }

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        //96dpi 기준일때의 값
        if (fontList.Count == 0)
        {
            AddFont();
        }
    }
    private void AddFont()
    {
        fontList.Add(new FontModel("Noto Sans"));
        fontList.Add(new FontModel("Nanum Gothic"));
        fontList.Add(new FontModel("Nanum Myeongjo"));
        fontList.Add(new FontModel("Nanum Gothic Coding"));
        fontList.Add(new FontModel("Nanum Brush Script"));
        fontList.Add(new FontModel("Nanum Pen Script"));
        fontList.Add(new FontModel("Arial"));
        fontList.Add(new FontModel("Verdana"));
        fontList.Add(new FontModel("Tahoma"));
        fontList.Add(new FontModel("Trebuchet MS"));
        fontList.Add(new FontModel("Times New Roman"));
        fontList.Add(new FontModel("Georgia"));
        fontList.Add(new FontModel("Garamond"));
        fontList.Add(new FontModel("Courier New"));
        fontList.Add(new FontModel("Brush Script MT"));
    }
}
