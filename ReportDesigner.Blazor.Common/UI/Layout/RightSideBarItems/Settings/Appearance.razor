@inherits PropertyBase
@inject SelectedControlService SelectedControlService
@inject DesignerCSSService CSS
@inject DesignerOptionService Options

<RadzenPanelMenuItem Text="Appearance" Expanded=@Options.GetPanelMenuState(this.GetType().Name) ExpandedChanged="(x) => OnExpandedChange(this.GetType().Name, x)">
    <div class="side-panel-contents-background">
        <RadzenStack class="property-stack" Orientation="@CSS.Orientation" Gap="@CSS.Gap" Reverse="@CSS.Reverse" JustifyContent="JustifyContent.Start" Wrap="@CSS.Wrap">
            <RadzenText class="property-displayName">BackColor</RadzenText>
            <RadzenColorPicker class="color-picker w-100" @bind-Value=BackColor ShowHSV=@showHSV ShowRGBA=@showRGBA ShowColors=@showColors ShowButton=@showButton Disabled=Locked />
        </RadzenStack>
        <RadzenStack class="property-stack" Orientation="@CSS.Orientation" Gap="@CSS.Gap" Reverse="@CSS.Reverse" JustifyContent="JustifyContent.Start" Wrap="@CSS.Wrap">
            <RadzenText class="property-displayName">UseBorder</RadzenText>
            <RadzenCheckBox @bind-Value=UseBorder Name="UseBorder" Disabled=Locked />
        </RadzenStack>
        @if (UseBorder)
        {
            <div style="background-color:#fafafa; border-radius:0.5rem; padding:0.2rem 0 0.2rem 0;">
                <RadzenStack class="property-stack" Orientation="@CSS.Orientation" Gap="@CSS.Gap" Reverse="@CSS.Reverse" JustifyContent="JustifyContent.Start" Wrap="@CSS.Wrap">
                    <RadzenText class="property-displayName property-sub">Border Color</RadzenText>
                    <RadzenColorPicker class="color-picker w-100" @bind-Value=@BorderColor ShowHSV=@showHSV ShowRGBA=@showRGBA ShowColors=@showColors ShowButton=@showButton Disabled=Locked />
                </RadzenStack>
                <RadzenStack class="property-stack" Orientation="@CSS.Orientation" Gap="@CSS.Gap" Reverse="@CSS.Reverse" JustifyContent="@CSS.JustifyContent" Wrap="@CSS.Wrap">
                    <RadzenText class="property-displayName property-sub">Border Thickness</RadzenText>
                    <RadzenNumeric class="property-item" Min="1" Max="10" TValue="int" @bind-Value=BorderThickness Disabled=Locked />
                </RadzenStack>
                <RadzenStack class="property-stack" Orientation="@CSS.Orientation" Gap="@CSS.Gap" Reverse="@CSS.Reverse" JustifyContent="@CSS.JustifyContent" Wrap="@CSS.Wrap">
                    <RadzenText class="property-displayName property-sub">Border Style</RadzenText>
                    <RadzenDropDown class="property-item property-dropdown" AllowClear="false" AllowFiltering="false" @bind-Value=@BorderStyle Data=@borderStyleList PopupStyle=@popupStyle Disabled=Locked>

                    </RadzenDropDown>
                </RadzenStack>
                <RadzenStack class="property-stack" Orientation="@CSS.Orientation" Gap="@CSS.Gap" Reverse="@CSS.Reverse" JustifyContent="JustifyContent.Start" Wrap="@CSS.Wrap">
                    <RadzenText class="property-displayName property-sub">Border Direction</RadzenText>
                    <RadzenSelectBar @bind-Value=@BorderSelectALL TValue="bool" class="d-flex selectbar-icon-only" Size="ButtonSize.ExtraSmall" Disabled=Locked>
                        <Items>
                            <RadzenSelectBarItem Icon="border_outer" Value="true" Style="padding:0.2rem;" />
                            <RadzenSelectBarItem Icon="border_clear" Value="false" Style="padding:0.2rem;" />
                        </Items>
                    </RadzenSelectBar>
                    <RadzenSelectBar @bind-Value=@BorderDirection TValue="IEnumerable<int>" class="d-flex selectbar-icon-only" Size="ButtonSize.ExtraSmall" Multiple="true" Disabled=Locked>
                        <Items>
                            <RadzenSelectBarItem Icon="border_top" Value="0" Style="padding:0.2rem;" />
                            <RadzenSelectBarItem Icon="border_right" Value="1" Style="padding:0.2rem;" />
                            <RadzenSelectBarItem Icon="border_bottom" Value="2" Style="padding:0.2rem;" />
                            <RadzenSelectBarItem Icon="border_left" Value="3" Style="padding:0.2rem;" />
                        </Items>
                    </RadzenSelectBar>
                </RadzenStack>
            </div>
        }
    </div>
</RadzenPanelMenuItem>
@code {
    //todo 테두리 없음의 경우 디자이너에서는 하얀색 점선으로 표시한다. 

    private string BackColor
    {
        get
        {
            if (SelectedControlService is not null && SelectedControlService.CurrentSelectedModel is not null)
                return SelectedControlService.CurrentSelectedModel.BackColor;
            else
                return "";
        }
        set
        {
            SelectedControlService.CurrentSelectedModel.BackColor = value;
            Options.RefreshBody();
        }
    }
    private bool Locked
    {
        get { return SelectedControlService.CurrentSelectedModel.Locked; }
    }
    private string BorderColor
    {
        get
        {
            if (SelectedControlService is not null && SelectedControlService.CurrentSelectedModel is not null)
                return SelectedControlService.CurrentSelectedModel.Border.Color;
            else
                return "";
        }
        set
        {
            SelectedControlService.CurrentSelectedModel.Border.Color = value;
            Options.RefreshBody();
        }
    }
    private string BorderStyle
    {
        get
        {
            if (SelectedControlService is not null && SelectedControlService.CurrentSelectedModel is not null)
                return SelectedControlService.CurrentSelectedModel.Border.Style;
            else
                return "";
        }
        set
        {
            SelectedControlService.CurrentSelectedModel.Border.Style = value;
            Options.RefreshBody();
        }
    }
    private int BorderThickness
    {
        get
        {
            if (SelectedControlService is not null && SelectedControlService.CurrentSelectedModel is not null)
                return SelectedControlService.CurrentSelectedModel.Border.Thickness;
            else
                return 1;
        }
        set
        {
            SelectedControlService.CurrentSelectedModel.Border.Thickness = value;
            Options.RefreshBody();
        }
    }
    private bool UseBorder
    {
        get
        {
            if (SelectedControlService is not null && SelectedControlService.CurrentSelectedModel is not null)
                return SelectedControlService.CurrentSelectedModel.Border.Use;
            else
                return true;
        }
        set
        {
            SelectedControlService.CurrentSelectedModel.Border.Use = value;
            Options.RefreshBody();
        }
    }

    private bool BorderSelectALL
    {
        get
        {
            if(BorderDirection.Count() == 4)
            {
                return true;
            }
            else
            {
                return false;
            }
        }
        set
        {
            if (value)
            {
                BorderDirection = new int[] { 0, 1, 2, 3 };
            }
            else
                BorderDirection = new int[] { };
        }
    }

    private IEnumerable<int> BorderDirection
    {
        get{
            if (SelectedControlService is not null && SelectedControlService.CurrentSelectedModel is not null)
            {
                if(SelectedControlService.CurrentSelectedModel.Border.UseIndividualBorders == true)
                {
                    List<int> nums = new List<int>();
                    if (SelectedControlService.CurrentSelectedModel.Border.UseTopBorder)
                        nums.Add(0);
                    if (SelectedControlService.CurrentSelectedModel.Border.UseRightBorder)
                        nums.Add(1);
                    if (SelectedControlService.CurrentSelectedModel.Border.UseBottomBorder)
                        nums.Add(2);
                    if (SelectedControlService.CurrentSelectedModel.Border.UseLeftBorder)
                        nums.Add(3);
                    return nums.ToArray();
                }
                else
                {
                    if (UseBorder)
                        return new int[] { 0, 1, 2, 3 };
                    else
                        return new int[] { };
                }
            }
            else
            {
                return new int[] { 0, 1, 2, 3 };
            }
        }
        set
        {
            if (SelectedControlService is not null && SelectedControlService.CurrentSelectedModel is not null)
            {
                if (value.Count() == 4)
                {
                    SelectedControlService.CurrentSelectedModel.Border.UseIndividualBorders = false;
                }
                else
                {
                    SelectedControlService.CurrentSelectedModel.Border.UseIndividualBorders = true;
                    if (value.Contains(0)) //상단
                    {
                        SelectedControlService.CurrentSelectedModel.Border.UseTopBorder = true;
                    }
                    else
                        SelectedControlService.CurrentSelectedModel.Border.UseTopBorder = false;

                    if (value.Contains(1)) //우측
                    {
                        SelectedControlService.CurrentSelectedModel.Border.UseRightBorder = true;
                    }
                    else
                        SelectedControlService.CurrentSelectedModel.Border.UseRightBorder = false;

                    if (value.Contains(2)) //하단
                    {
                        SelectedControlService.CurrentSelectedModel.Border.UseBottomBorder = true;
                    }
                    else
                        SelectedControlService.CurrentSelectedModel.Border.UseBottomBorder = false;

                    if (value.Contains(3)) //좌측
                    {
                        SelectedControlService.CurrentSelectedModel.Border.UseLeftBorder = true;
                    }
                    else
                        SelectedControlService.CurrentSelectedModel.Border.UseLeftBorder = false;

                    SelectedControlService.CurrentSelectedModel.Border.UpdateBorderColor();
                }

                Options.RefreshBody();
            }
        }
    }

    /// <summary>
    /// 이런 변수는 HotReload시 적용되지 않는다. 불러오는 부분이 없어서 그런듯 하다.
    /// </summary>
    private string popupStyle = @" --rz-dropdown-item-font-size: 0.7rem;
        --rz-dropdown-item-padding: 0.4rem 0.5rem;";

    bool showHSV = true;
    bool showRGBA = true;
    bool showColors = false;
    bool showButton = true;

    //테두리
    private List<string> borderStyleList = new List<string>();

    protected override void OnInitialized()
    {
        if(borderStyleList.Count == 0)
        {
            borderStyleList.Add("Solid");
            borderStyleList.Add("Dashed");
            borderStyleList.Add("Dotted");
        }
    }

    // private void SelectBorder(bool value)
    // {
    //     if (value)
    //     {
    //         borderDirection = new int[] { 0, 1, 2, 3 };
    //     }
    //     else
    //         borderDirection = new int[] { };

    //     SelectBorderDirection(borderDirection);
    // }
    // private void SelectBorderDirection(IEnumerable<int> x)
    // {
    //     int borderDirectionCount = borderDirection.Count();
    //     if (borderDirectionCount == 4)
    //     {
    //         borderSelectAll = true;
    //     }
    //     else
    //     {
    //         borderSelectAll = false;
    //     }

    //     if (SelectedControlService is not null && SelectedControlService.CurrentSelectedModel is not null)
    //     {
    //         if (borderDirectionCount == 4 )
    //         {
    //             SelectedControlService.CurrentSelectedModel.Border.UseIndividualBorders = false;
    //         }
    //         else
    //         {
    //             SelectedControlService.CurrentSelectedModel.Border.UseIndividualBorders = true;
    //             SelectedControlService.CurrentSelectedModel.Border.SetAllBorderColor("transparent");
    //             string color = BorderColor;
    //             if(borderDirection.Contains(0)) //상단
    //             {
    //                 SelectedControlService.CurrentSelectedModel.Border.TopColor = color;
    //             }
    //             if(borderDirection.Contains(1)) //우측
    //             {
    //                 SelectedControlService.CurrentSelectedModel.Border.RightColor = color;
    //             }
    //             if(borderDirection.Contains(2)) //하단
    //             {
    //                 SelectedControlService.CurrentSelectedModel.Border.BottomColor = color;
    //             }
    //             if (borderDirection.Contains(3)) //좌측
    //             {
    //                 SelectedControlService.CurrentSelectedModel.Border.LeftColor = color;
    //             }
    //         }

    //         Options.RefreshBody();
    //     }
    // }

}
