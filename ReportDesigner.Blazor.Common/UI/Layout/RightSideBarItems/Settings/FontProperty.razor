@inherits PropertyBase
@inject DesignerCSSService CSS
@inject DesignerOptionService Options
@inject SelectionService SelectedControlService
@inject LanguageService DD


<RadzenPanelMenuItem Text="Font" Expanded=@Options.GetPanelMenuState(this.GetType().Name) ExpandedChanged="(x) => OnExpandedChange(this.GetType().Name, x)">
    <div class="side-panel-contents-background">
        <RadzenStack class="property-stack" Orientation="@CSS.Orientation" Gap="@CSS.Gap" Reverse="@CSS.Reverse" JustifyContent="@CSS.JustifyContent" Wrap="@CSS.Wrap">
            <RadzenText class="property-displayName">Font Name</RadzenText>
            <RadzenDropDown class="property-item property-dropdown" AllowClear="false" AllowFiltering="false" @bind-Value=@FontName Data=@fontList ValueProperty="Name" PopupStyle=@CSS.DropDownPopupStyle Disabled=Locked>
                <Template>
                    @(DD.DD(context.Name))
                </Template>
            </RadzenDropDown>
        </RadzenStack>
        <RadzenStack class="property-stack" Orientation="@CSS.Orientation" Gap="@CSS.Gap" Reverse="@CSS.Reverse" JustifyContent="JustifyContent.Start" Wrap="@CSS.Wrap">
            <RadzenText class="property-displayName">Font Color</RadzenText>
            <RadzenColorPicker class="color-picker w-100" @bind-Value=@FontColor ShowHSV=@CSS.ShowHSV ShowRGBA=@CSS.ShowRGBA ShowColors=@CSS.ShowColors ShowButton=@CSS.ShowButton Disabled=Locked />
        </RadzenStack>
        <RadzenStack class="property-stack" Orientation="@CSS.Orientation" Gap="@CSS.Gap" Reverse="@CSS.Reverse" JustifyContent="@CSS.JustifyContent" Wrap="@CSS.Wrap">
            <RadzenText class="property-displayName">Font Size</RadzenText>
            <RadzenNumeric class="property-item" Min="6" Max="72" TValue="int" @bind-Value=@FontSize Disabled=Locked />
        </RadzenStack>
        <RadzenStack class="property-stack" Orientation="@CSS.Orientation" Gap="@CSS.Gap" Reverse="@CSS.Reverse" JustifyContent="JustifyContent.Start" Wrap="@CSS.Wrap" >
            <RadzenText class="property-displayName">Font Style</RadzenText>
            <RadzenSelectBar @bind-Value=@FontStyle TValue="IEnumerable<int>" class="d-flex selectbar-icon-only" Size="ButtonSize.ExtraSmall" Multiple="true" Disabled=Locked>
                <Items>
                    <RadzenSelectBarItem Icon="format_bold" Value="0" Style="padding:0.2rem;" />
                    <RadzenSelectBarItem Icon="format_italic" Value="1" Style="padding:0.2rem;" />
                    <RadzenSelectBarItem Icon="format_underlined" Value="2" Style="padding:0.2rem;" />
                    <RadzenSelectBarItem Icon="format_strikethrough" Value="3" Style="padding:0.2rem;" />
                </Items>
            </RadzenSelectBar>
        </RadzenStack>
    </div>
</RadzenPanelMenuItem>
@code {
    bool fixVerticalAlign = false;
    List<FontModel> fontList = new List<FontModel>();

    private string FontName
    {
        get
        {
            if (SelectedControlService is not null && SelectedControlService.CurrentSelectedModel is not null)
                return SelectedControlService.CurrentSelectedModel.Font.FontFamily;
            else
                return string.Empty;
        }
        set
        {
            SelectedControlService.CurrentSelectedModel.Font.FontFamily = value;
            Options.RefreshBody();

        }
    }
    private bool Locked
    {
        get { return SelectedControlService.CurrentSelectedModel.Locked; }
    }
    private string FontColor
    {
        get
        {
            if (SelectedControlService is not null && SelectedControlService.CurrentSelectedModel is not null)
                return SelectedControlService.CurrentSelectedModel.Font.FontColor;
            else
                return "Black";
        }
        set
        {
            SelectedControlService.CurrentSelectedModel.Font.FontColor = value;
            Options.RefreshBody();
        }
    }
    private int FontSize
    {
        get
        {
            if (SelectedControlService is not null && SelectedControlService.CurrentSelectedModel is not null)
                return SelectedControlService.CurrentSelectedModel.Font.FontSize;
            else
                return 14;
        }
        set
        {
            SelectedControlService.CurrentSelectedModel.Font.FontSize = value;
            Options.RefreshBody();
        }
    }
    private IEnumerable<int> FontStyle
    {
        get
        {
            List<int> nums = new List<int>();
            if (SelectedControlService is null || SelectedControlService.CurrentSelectedModel is null)
                return nums.ToArray();

            if (SelectedControlService.CurrentSelectedModel.Font.FontStyle.Contains("bold"))
                nums.Add(0);
            if (SelectedControlService.CurrentSelectedModel.Font.FontStyle.Contains("italic"))
                nums.Add(1);
            if (SelectedControlService.CurrentSelectedModel.Font.FontStyle.Contains("underline"))
                nums.Add(2);
            if (SelectedControlService.CurrentSelectedModel.Font.FontStyle.Contains("line-through"))
                nums.Add(3);

            return nums.ToArray();
        }
        set
        {
            /// font-style : italic
            /// font-weight: bold;
            /// text-decoration : underline
            /// text-decoration : line-through
            IEnumerable<int> nums = value;            

            string style = string.Empty;
            if (nums.Contains(0))

                style += "font-weight: bold;";
            if (nums.Contains(1))
                style += "font-style : italic;";

            if (nums.Count() > 0 && nums.Last() == 2)
            {
                style += "text-decoration : underline;";
                if (nums.Contains(3))
                {
                    int[] underline = new int[] { 3 };
                    nums = nums.Except(underline);
                }
            }
            if (nums.Count() > 0 && nums.Last() == 3)
            {
                style += "text-decoration : line-through;";
                if (nums.Contains(2))
                {
                    int[] lineThrough = new int[] { 2 };
                    nums = nums.Except(lineThrough);
                }
            }

            SelectedControlService.CurrentSelectedModel.Font.FontStyle = style;
            Options.RefreshBody();
        }
    }

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        //96dpi 기준일때의 값
        if (fontList.Count == 0)
        {
            AddFont();
        }
    }
    private void AddFont()
    {
        fontList.Add(new FontModel("Noto Sans"));
        fontList.Add(new FontModel("Nanum Gothic"));
        fontList.Add(new FontModel("Nanum Myeongjo"));
        fontList.Add(new FontModel("Nanum Gothic Coding"));
        fontList.Add(new FontModel("Nanum Brush Script"));
        fontList.Add(new FontModel("Nanum Pen Script"));
        fontList.Add(new FontModel("Arial"));
        fontList.Add(new FontModel("Verdana"));
        fontList.Add(new FontModel("Tahoma"));
        fontList.Add(new FontModel("Trebuchet MS"));
        fontList.Add(new FontModel("Times New Roman"));
        fontList.Add(new FontModel("Georgia"));
        fontList.Add(new FontModel("Garamond"));
        fontList.Add(new FontModel("Courier New"));
        fontList.Add(new FontModel("Brush Script MT"));
    }

    //todo : [고급]자동줄바꿈 사용안함 UI 추가 필요(white-space:pre)
    //todo : [고급]말줄임표(...) 표시 기능(text-overflow: ellipsis) white-space:pre 개행있고 넘어가면 말줄임 nowrap 개행이 말줄임
    //todo : [고급]장평조절기능 white-space:pre 나 nowrap 일때 적용가능. overflow : normal 로 변경
    
    #region 장평조절 예제. 테스트 결과 정상동작함.
    //     <div class="parent-container">
    //         <p class="dynamic-text">동적으로 조절되는 텍스트</p>
    //     </div>

    //     <style>
    //         .parent-container {
    //             width: 80vw;
    //             border: 1px solid #ccc;
    //             overflow: hidden;
    //         }

    //         .dynamic-text {
    //             white-space: nowrap;
    //             margin: 0;
    //             transform-origin: left center; /* 글자의 확대/축소 기준을 왼쪽 가운데로 설정 */
    //             transition: transform 0.2s ease; /* 부드러운 크기 전환을 위한 트랜지션 설정 */
    //         }
    //     </style>

    //     <script>
    //         const parentContainer = document.querySelector('.parent-container');
    //         const dynamicText = document.querySelector('.dynamic-text');

    //         function adjustTextScale() {
    //             const parentWidth = parentContainer.clientWidth;
    //             const textWidth = dynamicText.scrollWidth;

    //             // 글자의 너비가 부모의 너비를 초과하는 경우에만 조절
    //             if (textWidth > parentWidth) {
    //                 const scale = parentWidth / textWidth;

    //                 dynamicText.style.transform = `scale(${scale})`;
    //             } else {
    //                 dynamicText.style.transform = 'scale(1)';
    //             }
    //         }

    //         // 페이지 로드 시 초기 조절
    //         adjustTextScale();

    //         // 창 크기가 변경될 때마다 조절
    //         window.addEventListener('resize', adjustTextScale);
    //     </script>
    #endregion
}


