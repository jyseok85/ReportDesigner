@inherits PropertyBase

@inject SelectedControlService SelectedControlService
@inject DesignerCSSService CSS
@inject DesignerOptionService Options

<RadzenPanelMenuItem Text="Design" Expanded=@Options.GetPanelMenuState(this.GetType().Name) ExpandedChanged="(x) => OnExpandedChange(this.GetType().Name, x)">
    <div class="side-panel-contents-background">
        <RadzenStack class="property-stack" Orientation="@CSS.Orientation" Gap="@CSS.Gap" Reverse="@CSS.Reverse" JustifyContent="@CSS.JustifyContent" Wrap="@CSS.Wrap">
            <RadzenText class="property-displayName">Name</RadzenText>
            <RadzenTextBox class="w-100 property-item" @bind-Value=ControlName Disabled=Locked></RadzenTextBox>
        </RadzenStack>
        @if (Options.GetMoveableControl())
        {
            <RadzenStack class="property-stack" Orientation="@CSS.Orientation" Gap="@CSS.Gap" Reverse="@CSS.Reverse" JustifyContent="JustifyContent.Start" Wrap="@CSS.Wrap">
                <RadzenText class="property-displayName">Visible</RadzenText>
                <RadzenCheckBox @bind-Value=Visible Name="Visible" Disabled=Locked />
            </RadzenStack>
        }
    </div>
</RadzenPanelMenuItem>
@code {
    private bool Visible
    {
        get
        {
            if (SelectedControlService is not null && SelectedControlService.CurrentSelectedModel is not null)
                return SelectedControlService.CurrentSelectedModel.Visible;
            else
                return true;
        }
        set
        {
            SelectedControlService.CurrentSelectedModel.Visible = value;
            Options.RefreshBody();

        }
    }

    private bool Locked
    {
        get { return SelectedControlService.CurrentSelectedModel.Locked; }
    }

    private string ControlName
    {
        get
        {
            if (SelectedControlService is not null && SelectedControlService.CurrentSelectedModel is not null)
            {
                var type = SelectedControlService.CurrentSelectedModel.Type;
                if(type == ReportComponentModel.Control.TableCell)
                {
                    var info = SelectedControlService.CurrentSelectedModel.TableCellInfo;
                    return $"C:{info.Col} R:{info.Row}";
                }
                else
                    return SelectedControlService.CurrentSelectedModel.Name;
            }
            else
                return string.Empty;
        }
        set
        {
            SelectedControlService.CurrentSelectedModel.Name = value;
            Options.RefreshBody();

        }
    }
}
