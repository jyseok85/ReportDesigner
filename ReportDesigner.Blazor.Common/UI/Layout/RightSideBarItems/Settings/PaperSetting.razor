@using System.Drawing;
@inject DesignerOptionService Options

<div class="side-panel-contents-background">
    <RadzenText Text="@DD("Direction")" TextStyle="TextStyle.Subtitle2" Style="margin-top:0.5rem;" />
    <RadzenSelectBar @bind-Value=@IsLandScape TValue="bool" class="d-flex" Size="ButtonSize.ExtraSmall" Style="margin:0.25rem 0 0.25rem 0;">
        <Items>
            <RadzenSelectBarItem Text="@DD("Portrait")" Value="false" Style=" width:100%; text-align:center; " />
            <RadzenSelectBarItem Text="@DD("Landscape")" Value="true" Style=" width:100%; text-align:center; " />
        </Items>
    </RadzenSelectBar>
    <RadzenText Text="@DD("Paper Kind")" TextStyle="TextStyle.Subtitle2" Style="margin-top:0.5rem;" />
    <RadzenDropDown AllowClear="false" AllowFiltering="false" @bind-Value=@PaperKindValue Data=@paperKinds ValueProperty="Name" Style=@dropdownStyle PopupStyle=@popupStyle >
        <Template>
            @(context.Name)
        </Template>
    </RadzenDropDown>
    
    <RadzenText Text="@DD("Margin")" TextStyle="TextStyle.Subtitle2" Style="margin-top:0.5rem;" />
    <RadzenSelectBar @bind-Value=@marginType TValue="int" class="d-flex" Size="ButtonSize.ExtraSmall" Style="margin:0.25rem 0 0.25rem 0;">
        <Items> 
            <RadzenSelectBarItem Text="@DD("Default")" Value="0" Style=" width:100%; text-align:center; " />
            <RadzenSelectBarItem Text="@DD("None")" Value="1" Style=" width:100%; text-align:center; " />
            <RadzenSelectBarItem Text="@DD("Custom")" Value="2" Style=" width:100%; text-align:center; " />
        </Items>
    </RadzenSelectBar>
</div>
<style>
    .side-panel-contents-background {
        padding: 0.75rem 1.25rem 0.75rem 1.25rem;
        background-color: var(--rz-panel-menu-item-background-color);
    }
</style>
@code {
    private string dropdownStyle = @"display:block;padding:5px 3px 3px 7px;
                                    --rz-input-height:1.8rem;
                                    --rz-input-font-size:0.7rem;";
    /// <summary>
    /// 이런 변수는 HotReload시 적용되지 않는다. 불러오는 부분이 없어서 그런듯 하다.
    /// </summary>
    private string popupStyle = @"--rz-dropdown-item-font-size:0.7rem; 
                                  --rz-dropdown-item-padding: 0.4rem 0.5rem;";
    private bool isLandscape = false;
    public bool IsLandScape
    {
        get { return this.isLandscape; }
        set { this.isLandscape = value;
            Options.IsLandscape = value;
            ChangePaperSize();
        }
    }

    private int marginType = 0;

    //추후 다국어 처리를 위한 함수
    string DD(string text)
    {
        // if (this.initialized)
        //     text = LanguageManager.Instance.DD(text);
        return text;
    }
    string paperKind = "A4";
    List<PaperKind> paperKinds = new List<PaperKind>();
    public string PaperKindValue
    {
        get{ return this.paperKind; }
        set{ this.paperKind = value;
            ChangePaperSize();
        }
    }

   

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        //96dpi 기준일때의 값
        if (paperKinds.Count == 0)
        {
            AddPaperKinds();
        }
    }

    private void AddPaperKinds()
    {
        paperKinds.Add(new PaperKind("A3", 1129, 1596));
        paperKinds.Add(new PaperKind("A4", 798, 1123));
        paperKinds.Add(new PaperKind("A5", 562, 798));
        paperKinds.Add(new PaperKind("B4", 977, 1383));
        paperKinds.Add(new PaperKind("B5", 692, 977));
        paperKinds.Add(new PaperKind("Letter", 821, 1062));
    }

    private void ChangePaperSize()
    {
        Size paperSize;

        if (paperKinds.Count == 0)
        {
            AddPaperKinds();
        }
        PaperKind? paper = paperKinds.Find(x => x.Name == this.paperKind);
        if(paper is not null)
        {            
            if(this.isLandscape == false)
            {
                paperSize = new Size(paper.Width, paper.Height);
            }
            else
            {
                paperSize = new Size(paper.Height, paper.Width);
            }
            Options.PaperSize = paperSize;
        }
    }

    private class PaperKind
    {
        public string Name { get; set; }
        public int Width { get; set; }
        public int Height { get; set; }

        public PaperKind(string name, int width, int height)
        {
            this.Name = name;
            this.Width = width;
            this.Height = height;
        }
    }
}
