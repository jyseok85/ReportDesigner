@using System.Drawing;
@inherits PropertyBase
@inject MultiLanguageService DD
@inject DesignerCSSService CSS
@inject DesignerOptionService Options

<RadzenPanelMenuItem Text="Paper" Icon="description" Expanded=@Options.GetPanelMenuState(this.GetType().Name) ExpandedChanged="(x) => OnExpandedChange(this.GetType().Name, x)">
    <div class="side-panel-contents-background">
        <RadzenStack class="property-stack" Orientation="@CSS.Orientation" Gap="@CSS.Gap" Reverse="@CSS.Reverse" JustifyContent="@CSS.JustifyContent" Wrap="@CSS.Wrap">
            <RadzenText class="property-displayName" Text="@DD.DD("Direction")" />
            <RadzenSelectBar @bind-Value=@IsLandScape TValue="bool" class="d-flex property-selectbar" Size="ButtonSize.ExtraSmall">
                <Items>
                    <RadzenSelectBarItem Text="@DD.DD("Portrait")" Value="false" Style=@selectbarItemStyle />
                    <RadzenSelectBarItem Text="@DD.DD("Landscape")" Value="true" Style=@selectbarItemStyle />
                </Items>
            </RadzenSelectBar>
        </RadzenStack>
        <RadzenStack class="property-stack" Orientation="@CSS.Orientation" Gap="@CSS.Gap" Reverse="@CSS.Reverse" JustifyContent="@CSS.JustifyContent" Wrap="@CSS.Wrap">
        
            <RadzenText class="property-displayName" Text="@DD.DD("Paper Kind")" />
            <RadzenDropDown class="property-item" AllowClear="false" AllowFiltering="false" @bind-Value=@PaperKindValue Data=@paperKinds ValueProperty="Name" Style=@dropdownStyle PopupStyle=@CSS.DropDownPopupStyle>
                <Template>
                    @(context.Name)
                </Template>
            </RadzenDropDown>
        </RadzenStack>
        <RadzenStack class="property-stack" Orientation="@CSS.Orientation" Gap="@CSS.Gap" Reverse="@CSS.Reverse" JustifyContent="@CSS.JustifyContent" Wrap="@CSS.Wrap">

            <RadzenText class="property-displayName"  Text="@DD.DD("Margin")" />
            <RadzenSelectBar class="d-flex property-selectbar" @bind-Value=@marginType TValue="int" Size="ButtonSize.ExtraSmall" >
                <Items> 
                    <RadzenSelectBarItem Text="@DD.DD("Default")" Value="0" Style=@selectbarItemStyle/>
                    <RadzenSelectBarItem Text="@DD.DD("None")" Value="1" Style=@selectbarItemStyle />
                    <RadzenSelectBarItem Text="@DD.DD("Custom")" Value="2" Style=@selectbarItemStyle />
                </Items>
            </RadzenSelectBar>
        </RadzenStack>
    </div>
</RadzenPanelMenuItem>

<style>
    .selectbar-item{
        
    }
</style>
@code {
    private string selectbarItemStyle = @"width:100%;
        text-align:center;
        font-size:0.65rem;";
    private string dropdownStyle = @"display:block;padding:5px 3px 3px 7px;
                                    --rz-input-height:1.8rem;
                                    --rz-input-font-size:0.7rem;";

    private bool isLandscape = false;
    public bool IsLandScape
    {
        get { return this.isLandscape; }
        set { this.isLandscape = value;
            Options.IsLandscape = value;
            ChangePaperSize();
        }
    }
    string value;

   
    void OnChange(string value, string name)
    {
    }
    private int marginType = 0;

    string paperKind = "A4";
    List<PaperKind> paperKinds = new List<PaperKind>();
    public string PaperKindValue
    {
        get{ return this.paperKind; }
        set{ this.paperKind = value;
            ChangePaperSize();
        }
    }

   

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        //96dpi 기준일때의 값
        if (paperKinds.Count == 0)
        {
            AddPaperKinds();
        }
    }

    private void AddPaperKinds()
    {
        paperKinds.Add(new PaperKind("A3", 1129, 1596));
        paperKinds.Add(new PaperKind("A4", 798, 1123));
        paperKinds.Add(new PaperKind("A5", 562, 798));
        paperKinds.Add(new PaperKind("B4", 977, 1383));
        paperKinds.Add(new PaperKind("B5", 692, 977));
        paperKinds.Add(new PaperKind("Letter", 821, 1062));
    }

    private void ChangePaperSize()
    {
        Size paperSize;

        if (paperKinds.Count == 0)
        {
            AddPaperKinds();
        }
        PaperKind? paper = paperKinds.Find(x => x.Name == this.paperKind);
        if(paper is not null)
        {            
            if(this.isLandscape == false)
            {
                paperSize = new Size(paper.Width, paper.Height);
            }
            else
            {
                paperSize = new Size(paper.Height, paper.Width);
            }
            Options.PaperSize = paperSize;
        }
    }

    private class PaperKind
    {
        public string Name { get; set; }
        public int Width { get; set; }
        public int Height { get; set; }

        public PaperKind(string name, int width, int height)
        {
            this.Name = name;
            this.Width = width;
            this.Height = height;
        }
    }
}
