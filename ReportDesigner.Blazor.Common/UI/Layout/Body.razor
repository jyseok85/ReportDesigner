@page "/body"
@using Microsoft.JSInterop;
@inject DesignerOptionService Options
@inject ControlCreationService CreationService
@inject SelectedControlService SelectedControlService
@inject ControlResizeService ResizeService
@inject GridResizeService GridResizeService
@inject DragAndDropService DragService
@inject ReportContextMenuService ReportContextMenuService
@inject ContextMenuService ContextMenuService
@inject DialogService DialogService
@inject DesignerCSSService CSS
@inject IClipboardService ClipboardService
@inject IJSRuntime JsRuntime

<RadzenBody id="mainbody"
@onpointerup=OnPointerUp
@onpointermove=OnPointerMove
@onpointerleave=OnPointerLeave
@onkeydown="OnKeyDown"
@onkeyup=OnKeyUp
@ondrag:preventDefault="true"
ContextMenu=@(args => ShowContextMenu(args))
Style=@(Options.State == DesignerOptionService.ActionState.Create ? "cursor:copy;" : "")>
    <div class="report-background" id="report-background"
         style=@("transform:scale(" + designer.Zoom * 0.01f + ");margin:16px 0 0 " + leftOffset + "px;")>
        <RulerY Size="@report.Model.Height"></RulerY>
        <RulerX Size="@report.Model.Width"></RulerX>
        <Report Base="@report" />
    </div>
</RadzenBody>
<script>
    window.getBodyWidth = function () {
        return document.getElementById('mainbody').offsetWidth;
    };
    window.getLocationOfReport = function()
    {
        var mainbody = document.getElementById('mainbody');
        var reportback = document.getElementById('report-background');
        var report = document.getElementById('report');

        return [mainbody.offsetLeft + reportback.offsetLeft + report.offsetLeft,
        mainbody.offsetTop + reportback.offsetTop + report.offsetTop];

    }
</script>
<style>
    .report-background{
        transform-origin:top;
        position:absolute;
        top:0%;
        left:50%;
        /* report-background 가로사이즈의 절반 = 용지사이즈 + 좌측눈금자의 반 */
        transform: scale(1);
        padding:25px;
    }  
</style>
@code {
    private ReportBase report = null;


    [CascadingParameter]
    private Designer designer { get; set; }

    private int leftOffset = 0;


    protected override void OnInitialized()
    {
        base.OnInitialized();
        Options.PaperSizeChanged += this.PaperSizeChanged;
        Options.Refresh += this.RefreshBody;
        AddReport();
        //todo 용지 사이즈를 초반에 셋팅해주는 부분이지만 이런코드를 넣는 위치를 바꿀 필요가 있다. 
        PaperSizeChanged(Options.PaperSize.Width, 0);
        Options.SelectedControl = SelectedControlService;

        CreationService.SelectedControlService = SelectedControlService;

        ReportContextMenuService.ContextMenuService = ContextMenuService;
        ReportContextMenuService.SelectedControlService = SelectedControlService;
        ReportContextMenuService.ControlCreationService = CreationService;
        ReportContextMenuService.Options = Options;
        ReportContextMenuService.ClipboardService = ClipboardService;
        SelectedControlService.CSS = CSS;
        SelectedControlService.JsRuntime = JsRuntime;
        CreationService.CSS = CSS;
    }

    /// <summary>
    /// 마우스를 움직일때마다 매번 호출되고 있다. 
    /// </summary>
    /// <param name="firstRender"></param>
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            //자바스크립트에서 .Net을 호출하기 위한 객체 전달
            var lDotNetReference = DotNetObjectReference.Create(this);
            await JsRuntime.InvokeVoidAsync("GLOBAL.SetDotnetReference", lDotNetReference);

            //브라우저 사이즈시 콜백 추가
            await JsRuntime.InvokeAsync<object>("browserResize.registerResizeCallback");
        }
    }

    [JSInvokable]
    public void OnBrowserResize()
    {
        PaperSizeChanged(Options.PaperSize.Width);
    }

    private void RefreshBody(object? sender, string key)
    {
        if (key.Equals("body"))
        {
            Logger.Instance.Write("RefreshBody");
            this.StateHasChanged();
        }
    }

    private void PaperSizeChanged(object? sender, int delay = 0)
    {

        Task.Factory.StartNew(async () =>
        {
            if(sender is not null)
            {
                await Task.Delay(delay);

                int paperWidth = (int)sender;
                int bodyWidth = await JsRuntime.InvokeAsync<int>("getBodyWidth");        
                //todo 제대로된 계산할 필요가 있음.

                if (bodyWidth  > paperWidth)
                    leftOffset = - (25 + paperWidth) / 2;
                else
                    leftOffset = -(bodyWidth / 2) + 16;

                await ResizedControl();
            }
            else
            {
                Logger.Instance.Write("[PaperSizeChanged] - Sender is Null");
            }
        });        
    }

    private async Task ResizedControl()
    {
        Options.UpdateAllControlOffset();
        await this.InvokeAsync(StateHasChanged);
    }

    public void AddReport()
    {
        report = new ReportBase();
        Options.AddControl(report.Model.Uid, report.Model);
    }
    public void OnPointerMove(PointerEventArgs e)
    {
        switch(Options.State)
        {
            case DesignerOptionService.ActionState.Create:
                CreationService.ActionMove(e);
                break;
            case DesignerOptionService.ActionState.Resize:
                ResizeService.ActionMove(e);
                StateHasChanged();
                break;
            case DesignerOptionService.ActionState.GridResize:
                GridResizeService.ActionMove(e);
                StateHasChanged(); 
                break;
            default:
                if (SelectedControlService.CurrentSelectedModel is not null && Options.State == DesignerOptionService.ActionState.Drag)
                {
                    //todo 이동가능한 컨트롤일때로 변경해야함.
                    if (SelectedControlService.CurrentSelectedModel.Type != ReportComponentModel.Control.Band)
                    { 
                        DragService.Hidden = false;
                        DragService.Move(e.ClientX, e.ClientY);
                        DoSnap();
                    }
                }
                break;
        }
    }

    public async void OnPointerUp(PointerEventArgs e)
    {
        Logger.Instance.Write($"Options.State : {Options.State}");

        // var control = controlBases.Find(x => x.Selected == true);
        if (Options.State == DesignerOptionService.ActionState.Create)
        {
            //드래그는 우측 하단으로만 진행하도록 한다.
            switch (Options.CreateControlType)
            {
                case ReportComponentModel.Control.Label:
                    CreationService.ActionEnd();
                    break;
                case ReportComponentModel.Control.Table:
                    string style = @"--rz-dialog-background-color:#E3EAF2;
                                     --rz-dialog-title-background-color:#E3EAF2;
                                     ";
                    //팝업을 실행해서 테이블 정보를 입력받는다. 
                    var result = await DialogService.OpenAsync<TableSetupPopup>("표 삽입", null,
                        new DialogOptions() { Width = "25rem", Height = "24rem", Resizable = false, Draggable = false, Style = style });

                    if (result == null)
                    {
                        CreationService.ActionExit();
                    }
                    else
                    {
                        //테이블을 생성해야한다. 
                        CreationService.CreateControl(ReportComponentModel.Control.Table, result);
                        CreationService.ActionExit();
                    }
                    StateHasChanged();
                    break;
            }
        }
        else if (Options.State == DesignerOptionService.ActionState.Resize)
        {            
            //todo : 컨트롤을 2개이상 선택한 순간, 사이즈조절 컨트롤을 안보이게 한다. 
            //선택컨트롤,
            //사이즈조절 컨트롤 구분필요.
            ResizeService.ActionEnd();
            StateHasChanged();
            ResizeService.ActionExit();
        }
        else if(Options.State == DesignerOptionService.ActionState.GridResize)
        {
            GridResizeService.ActionEnd();  
            ResizeService.Width = SelectedControlService.LastSelectModel.Width;
            ResizeService.Height = SelectedControlService.LastSelectModel.Height;
            StateHasChanged();
        }

        // if (control is not null)
        // {
        //     SortControls();
        //     //control.IsDragAble = false;
        // }



        ReleaseState();
    }

    private void OnPointerLeave()
    {
        Logger.Instance.Write("Body - OnPointerLeave");
        //todo : 항상타서 성능잡아먹음. 아무작업없이 마우스 움직일때 어떻게 할지 고민필요.
        ReleaseState();
    }

    private void ReleaseState()

    {
        Options.State = DesignerOptionService.ActionState.None;
        Logger.Instance.Write("Body - ReleaseState");

        Options.UpdateAllControlOffset();
        Options.HideSnap();


        DragService.End();
        GridResizeService.ActionExit();
        ResizeService.ActionExit();
        //SelectedControlService.CurrentSelectedModel = null;

        //todo 모든컨트롤 편집모드 해제
        Options.TurnOffEditModeForAllControls();

        //컨트롤이 변경되었다고 이벤트를 보낸다. (변경안되도 호출되네?)
        Options.FireControlSelectionChangedEvent();

        Options.EventStartObject = null;
    }


    private void DoSnap()
    {
        Dictionary<string, int> dragObjectSnapPoint = new Dictionary<string, int>();
        dragObjectSnapPoint.Add("left", (int)DragService.PosX + Options.PaperMargin.Left);
        dragObjectSnapPoint.Add("top", (int)DragService.PosY + Options.PaperMargin.Top);
        dragObjectSnapPoint.Add("right", (int)DragService.Right + Options.PaperMargin.Left);
        dragObjectSnapPoint.Add("bottom", (int)DragService.Bottom + Options.PaperMargin.Top);

        //절대값 수치로 계산한다.
        //Logger.Instance.Write($"Do  Snap : {dragObjectSnapPoint["left"]} {dragObjectSnapPoint["top"]} {dragObjectSnapPoint["right"]} {dragObjectSnapPoint["bottom"]}");
        var snapPoint = Options.DoSnap(dragObjectSnapPoint, (int)DragService.Width, (int)DragService.Height);
        //Logger.Instance.Write($"snapPoint: {snapPoint.X} {snapPoint.Y}");

        if (snapPoint.X is not -999)
            DragService.PosX = snapPoint.X - Options.PaperMargin.Left;
        if (snapPoint.Y is not -999)
            DragService.PosY = snapPoint.Y - Options.PaperMargin.Top;
    }

    bool keyReleased = true;
    private void OnKeyDown(KeyboardEventArgs e)
    {
        if (SelectedControlService.CurrentSelectedModel is not null)
        {
            //컨트롤 키와 같이 누른경우
            if (e.CtrlKey)
            {
                Logger.Instance.Write(e.Key);

                //컨트롤 방향키 스냅포인트로 이동. 연속 누르기 금지
                if (keyReleased == false)
                    return;


                if(e.Key.Contains("Arrow"))
                {
                    Options.SetSnapPoint(e.Key);
                    keyReleased = false;
                }
                else if(e.Key == "c")
                {
                    SelectedControlService.CopyControl();
                    keyReleased = false;
                }
                else if(e.Key == "x")
                {
                    ReportContextMenuService.CutControl();
                    keyReleased = false;
                }
                else if(e.Key == "v")
                {
                    ReportContextMenuService.PasteControl(useLastMousePos:false);
                    keyReleased = false;
                }
                else if(e.Key == "d")
                {
                    ReportContextMenuService.DuplicateControl();
                    keyReleased = false;

                }

            }
            else
            {
                Logger.Instance.Write(e.Key);

                switch (e.Key)
                {
                    case "ArrowRight":
                        SelectedControlService.CurrentSelectedModel.X += 1;
                        break;
                    case "ArrowDown":
                        SelectedControlService.CurrentSelectedModel.Y += 1;
                        break;
                    case "ArrowLeft":
                        SelectedControlService.CurrentSelectedModel.X -= 1;
                        break;
                    case "ArrowUp":
                        SelectedControlService.CurrentSelectedModel.Y -= 1;
                        break;
                    case "Delete":
                        ReportContextMenuService.RemoveControl();
                        break;
                }
            }
        }
    }

    private void OnKeyUp(KeyboardEventArgs e)
    {
        Options.UpdateAllControlOffset();
        keyReleased = true;
    }

    public async void ShowContextMenu(MouseEventArgs args)
    {
        var offset = await JsRuntime.InvokeAsync<int[]>("getLocationOfReport");
        Point point = new Point();
        point.X = offset[0];
        point.Y = offset[1];
        ReportContextMenuService.ShowContextMenuWithItems(args, point);
    }
}
