@page "/body"
@using Microsoft.JSInterop;
@inject DesignerOptionService Options
@inject ControlCreationService CreationService
@inject SelectedControlService SelectedControlService
@inject ControlModificationServcie ModificationService
@inject DragAndDropService DragService
@inject IJSRuntime JsRuntime

<RadzenBody id="mainbody"
@onpointerup=OnPointerUp
@onpointermove=OnPointerMove
@onpointerleave=OnPointerLeave
ondragover="event.preventDefault()"
Style=@(Options.State == DesignerOptionService.ActionState.Create ? "cursor:copy;" : "")>
    <div class="report-background"
         style=@("transform:scale(" + designer.Zoom * 0.01f + ");margin:16px 0 0 " + leftOffset + "px;")>
        <RulerY Size="@report.Model.Height"></RulerY>
        <RulerX Size="@report.Model.Width"></RulerX>
        <Report Base="@report" />
    </div>
</RadzenBody>
<script>
    window.getBodyWidth = function () {
        return document.getElementById('mainbody').offsetWidth;
    };
</script>
<style>
    .report-background{
        transform-origin:top;
        position:absolute;
        top:0%;
        left:50%;
        /* report-background 가로사이즈의 절반 = 용지사이즈 + 좌측눈금자의 반 */
        transform: scale(1);
        padding:25px;
    }  
</style>
@code {
    private ReportBase report = null;


    [CascadingParameter]
    private Designer designer { get; set; }

    private int leftOffset = 0;


    protected override void OnInitialized()
    {
        base.OnInitialized();
        Options.PaperSizeChanged += this.PaperSizeChanged;
        AddReport();
        //todo 용지 사이즈를 초반에 셋팅해주는 부분이지만 이런코드를 넣는 위치를 바꿀 필요가 있다. 
        PaperSizeChanged(Options.PaperSize.Width, 0);
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        //자바스크립트에서 .Net을 호출하기 위한 객체 전달
        var lDotNetReference = DotNetObjectReference.Create(this);
        await JsRuntime.InvokeVoidAsync("GLOBAL.SetDotnetReference", lDotNetReference);

        //브라우저 사이즈시 콜백 추가
        await JsRuntime.InvokeAsync<object>("browserResize.registerResizeCallback");
    }
    [JSInvokable]
    public void OnBrowserResize()
    {
        PaperSizeChanged(Options.PaperSize.Width);
    }


    private void PaperSizeChanged(object? sender, int delay = 0)
    {
        Task.Factory.StartNew(async () =>
        {
            if(sender is not null)
            {
                await Task.Delay(delay);


                int paperWidth = (int)sender;
                int bodyWidth = await JsRuntime.InvokeAsync<int>("getBodyWidth");        
                //todo 제대로된 계산할 필요가 있음.

                if (bodyWidth  > paperWidth)
                    leftOffset = - (25 + paperWidth) / 2;
                else
                    leftOffset = -(bodyWidth / 2) + 16;

                await ResizedControl();
            }
            else
            {
                Console.WriteLine("[PaperSizeChanged] - Sender is Null");
            }
        });        
    }

    private async Task ResizedControl()
    {

        Options.UpdateAllControlOffset();
        await this.InvokeAsync(StateHasChanged);
    }

    public void AddReport()
    {
        report = new ReportBase();
        Options.AddControl(report.Model.Uid, report.Model);
    }
    public void OnPointerMove(PointerEventArgs e)
    {
        if (Options.State == DesignerOptionService.ActionState.Create)
            CreationService.ActionMove(e);
        else if (Options.State == DesignerOptionService.ActionState.Resize)
        {
            ModificationService.ActionMove(e);
            StateHasChanged();
        }
        else
        {
            if (SelectedControlService.CurrentSelectedModel is not null)
            {

                //todo 이동가능한 컨트롤일때로 변경해야함.
                if (SelectedControlService.CurrentSelectedModel.Type != ReportComponentModel.Control.Band)
                { 
                    DragService.Hidden = false;
                    DragService.Move(e.ClientX, e.ClientY);
                    DoSnap();
                    // Console.WriteLine($"{e.ClientX} {e.ClientY}");
                }
            }
        }
    }

    public void OnPointerUp(PointerEventArgs e)
    {
        // var control = controlBases.Find(x => x.Selected == true);
        if (Options.State == DesignerOptionService.ActionState.Create)
        {
            //드래그는 우측 하단으로만 진행하도록 한다.
            CreationService.ActionEnd();
        }
        else if (Options.State == DesignerOptionService.ActionState.Resize)
        {            
            if (ModificationService.IsChanged)
            {
                if (ModificationService.Id == SelectedControlService.LastSelectModel.Uid)
                {
                    string uid = SelectedControlService.LastSelectModel.ParentUid;
                    var bandModel = Options.ControlDictionary[uid];

                    SelectedControlService.ApplyResize(ModificationService.X, ModificationService.Y, ModificationService.Width, ModificationService.Height, bandModel);

                    //선택된 컨트롤이 부모밴드보다 커질경우 부모밴드 또한 늘려준다.

                    ModificationService.X = SelectedControlService.LastSelectModel.X;
                    ModificationService.Y = SelectedControlService.LastSelectModel.Y;
                    ModificationService.Width = SelectedControlService.LastSelectModel.Width;
                    ModificationService.Height = SelectedControlService.LastSelectModel.Height;

                    if (SelectedControlService.LastSelectModel.Bottom > bandModel.Height)
                        bandModel.Height = SelectedControlService.LastSelectModel.Bottom;

                    StateHasChanged();
                }
            }
            ModificationService.ActionEnd();
        }

        // if (control is not null)
        // {
        //     SortControls();
        //     //control.IsDragAble = false;
        // }

        Options.State = DesignerOptionService.ActionState.None;
        Console.WriteLine("Body - OnPointerUp");

        Options.UpdateAllControlOffset();
        Options.UpdateSnapControl();
        Options.HideSnap();

        DragService.End();
        SelectedControlService.CurrentSelectedModel = null;
    }

    private void OnPointerLeave()
    {
        Options.State = DesignerOptionService.ActionState.None;
        Console.WriteLine("Body - OnPointerLeave");

        Options.UpdateAllControlOffset();
        Options.UpdateSnapControl();
        Options.HideSnap();

        DragService.End();
        SelectedControlService.CurrentSelectedModel = null;
    }



    private void DoSnap()
    {
        Dictionary<string, int> dragObjectSnapPoint = new Dictionary<string, int>();
        dragObjectSnapPoint.Add("left", (int)DragService.PosX + Options.PaperMargin.Left);
        dragObjectSnapPoint.Add("top", (int)DragService.PosY + Options.PaperMargin.Top);
        dragObjectSnapPoint.Add("right", (int)DragService.Right + Options.PaperMargin.Left);
        dragObjectSnapPoint.Add("bottom", (int)DragService.Bottom + Options.PaperMargin.Top);
        //절대값 수치로 계산한다.

        Console.WriteLine($"Do  Sanp : {dragObjectSnapPoint["left"]} {dragObjectSnapPoint["top"]} {dragObjectSnapPoint["right"]} {dragObjectSnapPoint["bottom"]}");
        var snapPoint = Options.DoSnap(dragObjectSnapPoint, (int)DragService.Width, (int)DragService.Height);
        Console.WriteLine($"snapPoint: {snapPoint.X} {snapPoint.Y}");

        if (snapPoint.X is not -999)
             DragService.PosX = snapPoint.X - Options.PaperMargin.Left;
        if (snapPoint.Y is not -999)
             DragService.PosY = snapPoint.Y - Options.PaperMargin.Top;

    }
}
