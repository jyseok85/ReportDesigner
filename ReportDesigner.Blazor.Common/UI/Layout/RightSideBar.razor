@inject DesignerOptionService Options
@inject DesignerCSSService CSS
@inject LanguageService DD
@inject ResizingService ResizeService
@inject SelectionService SelectedControlService

<RadzenSidebar class="rz-right-sidebar" @bind-Expanded="@showSidePanel" Style="border-left:solid 1px lightgray;user-select: none">
    <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Stretch" JustifyContent="JustifyContent.SpaceBetween" Style="height:100%;gap:0;">
        <RadzenStack Orientation="Orientation.Vertical" Style="flex-direction:inherit !important; background-color:lightgray; height:inherit;transition: var(--rz-transition-all);--rz-panel-menu-item-transition: var(--rz-transition-all);">
            <RadzenStack Orientation="Orientation.Vertical" Style="transition: var(--rz-transition-all);--rz-panel-menu-item-transition: var(--rz-transition-all);">
                <RadzenPanelMenu Click="OnParentClicked" Style=@((this.showRightSidePanel ?"width:350px;":"width:0px;") +"transition: var(--rz-transition-all);") Multiple="@multiple">
                    <div class="right-panel">
                        <ControlList ></ControlList>
                        @if (this.currentRightPanel == RightPanelType.Property)
                        {
                            <Design @ref=design></Design>

                            var model = SelectedControlService.CurrentSelectedModel;
                           @*  if(model.Type == ReportComponentModel.Control.Table)
                                model = SelectedControlService.BeforeSelectedModel; *@

                            @if (model.Type == ReportComponentModel.Control.Label || model.Type == ReportComponentModel.Control.TableCell)
                            {
                                <Appearance @ref=appearance></Appearance>
                                <FontProperty @ref=font></FontProperty>
                                <ParagraphSetting @ref=paragraph></ParagraphSetting>
                                <DataSource @ref=datasource></DataSource>
                            }
                            <Layout @ref=layout Type="model.Type"></Layout>
                        }
                        else if (this.currentRightPanel == RightPanelType.Settings)
                        {
                            <PaperSetting></PaperSetting>
                            <ControlSetting></ControlSetting>
                        }
                        else if (this.currentRightPanel == RightPanelType.ObjectBrowser)
                        {
                            <div style="background-color:#D7D7D7;height:1px;" />
                            //<ControlView @ref=treeview></ControlView>
                        }
                    </div>
                </RadzenPanelMenu>
            </RadzenStack>
        </RadzenStack>
        <RadzenStack Orientation="Orientation.Vertical" Style="border-left: 1px solid lightgray;">
            <RadzenPanelMenu DisplayStyle="MenuItemDisplayStyle.Icon" ShowArrow=false>
                <RadzenPanelMenuItem Text="Property" Icon="edit_attributes" Click="ShowRightPanel" />
                <RadzenPanelMenuItem Text="FieldList" Icon="storage" Click="ShowRightPanel" />
                <RadzenPanelMenuItem Text="ObjectBrowser" Icon="account_tree" Click="ShowRightPanel" />
                <RadzenPanelMenuItem Text="Settings" Icon="settings" Click="ShowRightPanel" />
            </RadzenPanelMenu>
        </RadzenStack>
    </RadzenStack>

</RadzenSidebar>

<style>
    .selectbar-icon-only {
        --rz-panel-menu-icon-2nd-level-margin: 0;
    }

    .color-picker {
        --rz-colorpicker-value-border-radius: 10px;
        height: inherit;
    }

    .small-height {
        height: 10px !important;
    }

    .property-stack {
        align-items: center !important;
        height: 30px;
        margin: 0.5rem;
    }


    .property-stack-2nd {
        align-items: center !important;
        height: 30px;
        margin: 0rem;
    }

    .property-displayName {
        min-width: 7rem;
        max-width: 7rem;
        margin-top: 0.5rem; /* 폰트사이즈 0.7rem 의 경우 */
        /* user-select: none; /* 드래그 or 더블클릭 선택 막기 */
    }

    .property-displayName-small {
        text-align: center;
        min-width: 1rem;
        max-width: 1rem;
        margin-top: 0.5rem; /* 폰트사이즈 0.7rem 의 경우 */
    }

    .property-displayName-2nd {
        min-width: 3.5rem;
        max-width: 3.5rem;
        margin-top: 0.5rem; /* 폰트사이즈 0.7rem 의 경우 */
    }

    .property-sub {
        margin-left: 0.5rem;
        min-width: 6.5rem;
    }

    .property-item {
        height: inherit;
        width: 100%;
        --rz-numeric-button-width: 0.8rem;
        --rz-numeric-button-height: 0.7rem;
    }

    .property-selectbar {
        width: 100%;
    }

    .property-dropdown {
        display: block;
        padding: 5px 3px 3px 7px;
        --rz-input-height: 1.8rem;
        --rz-input-font-size: 0.7rem;
    }

    .right-panel {
        --rz-panel-menu-item-padding: 0.5rem;
        --rz-panel-menu-item-background-color: #EDEDED;
        --rz-text-body1-font-size: 0.7rem;
        --rz-input-font-size: 0.7rem;
        --rz-input-padding: 0.3rem 0.5rem;
        font-weight: 600;
        font-size: smaller;
    }

    .side-panel-contents-background {
        padding: 0.5rem;
        background-color: var(--rz-panel-menu-item-background-color);
    }
</style>
@code {
    Design? design;
    FontProperty? font;
    Layout? layout;
    DataSource? datasource;
    Appearance? appearance;
    ControlView? treeview;
    ParagraphSetting? paragraph;

    bool showSidePanel = false;

    enum RightPanelType
    {
        Property,
        FieldList,
        ObjectBrowser,
        Settings
    }
    bool multiple = true;

    private RightPanelType currentRightPanel = RightPanelType.Property;
    private bool showRightSidePanel = false;


    void ShowRightPanel(string type)
    {
        bool isFold = false;
        switch (type)
        {
            case "PROPERTY":
                if (currentRightPanel == RightPanelType.Property && showRightSidePanel == true)
                {
                    isFold = false;
                }
                else
                {
                    isFold = true;
                    this.currentRightPanel = RightPanelType.Property;
                }
                break;
            case "FIELDLIST":
                if (currentRightPanel == RightPanelType.FieldList && showRightSidePanel == true)
                {
                    isFold = false;
                }
                else
                {
                    isFold = true;
                    this.currentRightPanel = RightPanelType.FieldList;
                }
                break;
            case "OBJECTBROWSER":
                if (currentRightPanel == RightPanelType.ObjectBrowser && showRightSidePanel == true)
                {
                    isFold = false;
                }
                else
                {
                    isFold = true;
                    this.currentRightPanel = RightPanelType.ObjectBrowser;
                }
                break;
            case "SETTINGS":
                if (currentRightPanel == RightPanelType.Settings && showRightSidePanel == true)
                {
                    isFold = false;
                }
                else
                {
                    isFold = true;
                    this.currentRightPanel = RightPanelType.Settings;
                }
                break;
        }
        if (this.showRightSidePanel != isFold)
        {
            this.showRightSidePanel = isFold;
            Options.FirePaperSizeChangedEvent(100);
        }

    }
    void ShowRightPanel(MenuItemEventArgs args)
    {
        //패널 버튼을 클릭하면 해당 목록을 표시한다.

        //컨트롤을 클릭하면 해당 목록에 연관된 속성을 표시한다.

        //리포트, 레이어는 선택방법이 없고, 드롭다운에서 선택시. 디자인, 레이아웃을 표시해준다.

        string type = args.Text.ToUpper();
        ShowRightPanel(type);
        StateHasChanged();

    }
    void OnChildClicked(MenuItemEventArgs args)
    {

    }
    void OnParentClicked(MenuItemEventArgs args)
    {

    }

    protected override void OnInitialized()
    {
        base.OnInitialized();
        Options.ControlSelectionChanged += ControlSelectionChanged;
    }

    private void ControlSelectionChanged(object? sender, string key)
    {
        //해당 패널을 갱신시킨다.
        //데이터는 전달하는게 아니라.
        //해당 패널의 속성에서 패널 갱신시킬때 Get 부분을 타게 되고 불러오게 된다.
        Logger.Instance.Write($"ControlSelectionChanged : {key}");
        if (key.Equals("Right"))
        {
            design.RefreshState();
            font?.RefreshState();
            appearance?.RefreshState();
            datasource?.RefreshState();
            layout.RefreshState();
            paragraph?.RefreshState();
            //treeview?.RefreshState();

        }
        else if (key.Equals("ShowRightPanel"))
        {
            ShowRightPanel("PROPERTY");
        }



        StateHasChanged();
        //todo : 레이아웃에서 컨트롤 이동시 스냅이 업데이트 안됨. todo
    }
}